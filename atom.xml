<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AI 异构</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xuke225.github.io.git/child/"/>
  <updated>2017-11-22T14:11:57.171Z</updated>
  <id>http://xuke225.github.io.git/child/</id>
  
  <author>
    <name>许柯</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PipeCNN——memRead</title>
    <link href="http://xuke225.github.io.git/child/2017/11/18/PipeCNN/memRead/"/>
    <id>http://xuke225.github.io.git/child/2017/11/18/PipeCNN/memRead/</id>
    <published>2017-11-17T16:00:00.000Z</published>
    <updated>2017-11-22T14:11:57.171Z</updated>
    
    <content type="html"><![CDATA[<h3 id="memRead作用描述"><a href="#memRead作用描述" class="headerlink" title="memRead作用描述"></a>memRead作用描述</h3><p>memRead的作用主要是从<code>Global Memery</code>中读取<code>data</code> <code>weight</code> <code>bias</code> 然后设置并行化传输方式，处理卷积前的<code>Pading</code>与<code>Group</code>操作以及窗口的预缓冲，便于数据的读取。<br><img src="http://oz3lw4cji.bkt.clouddn.com/835691eecaad88c6d31edbdb0e110c4e.png" alt="结构图"><br>具体作用如下：</p><ul><li>将向量化的<code>VEC_SIZE</code>个<code>data</code>数据复制<code>LANE_NUM</code>份传到<code>data_ch</code>中</li><li>将向量化的<code>VEC_SIZE * LANE_NUM</code>个<code>weight</code>参数传到<code>weight_ch</code>中</li><li>将向量化的<code>LANE_NUM</code>个<code>bias</code>参数传到<code>bias_ch_in</code>中</li><li>处理<code>Pading</code>以及<code>split[group]</code>问题</li><li><p><code>Window Buffer</code>数据预取</p><a id="more"></a><h3 id="memRead数据结构"><a href="#memRead数据结构" class="headerlink" title="memRead数据结构"></a>memRead数据结构</h3></li><li><p>入口参数相关结构</p><ul><li>卷积计算参量<br><img src="http://oz3lw4cji.bkt.clouddn.com/90652c47934d88aac34b0c65cf68f00c.png" alt="卷积计算参量"></li><li>卷积控制参量<br><code>stride</code> <code>padding</code> <code>group</code></li><li>group_rem模型<br><img src="http://oz3lw4cji.bkt.clouddn.com/f3905e7c6238da7eeb664b79a1264518.png" alt="group_rem模型"></li><li>win_size模型<br><img src="http://oz3lw4cji.bkt.clouddn.com/2ef826a33dd1bc37f385779505a1385e.png" alt="win_size模型"></li><li>向量化描述及global接口<br><img src="http://oz3lw4cji.bkt.clouddn.com/f9566704d238b4bdbfae0f137289be4a.png" alt="向量化描述"></li></ul></li><li>变量 &amp; 数组<ul><li><code>__local lane_data    win_buffer[2][WIN_BUF_SIZE]</code> Ping-pong buffer 用于预存储<code>data</code>数值<br><img src="http://oz3lw4cji.bkt.clouddn.com/66792eebe31baef61d76827f19c58082.png" alt="win_buffer"></li><li><code>__local channel_vec  weight_buffer[WEIGHT_BUF_SIZE]</code>用于预存储<code>weight</code> 数值<br><img src="http://oz3lw4cji.bkt.clouddn.com/6ff5223989351b8a2bc520cae7eb2ee3.png" alt="weight_buffer"></li></ul></li></ul><h3 id="memRead数据流传输方式"><a href="#memRead数据流传输方式" class="headerlink" title="memRead数据流传输方式"></a>memRead数据流传输方式</h3><h3 id="memRead执行过程"><a href="#memRead执行过程" class="headerlink" title="memRead执行过程"></a>memRead执行过程</h3><p><img src="http://oz3lw4cji.bkt.clouddn.com/memRead%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B-1.gif" alt="memRead执行过程"></p><h3 id="memRead处理细节"><a href="#memRead处理细节" class="headerlink" title="memRead处理细节"></a>memRead处理细节</h3><h4 id="win-buffer-的-Ping-pong-操作"><a href="#win-buffer-的-Ping-pong-操作" class="headerlink" title="win_buffer 的 Ping-pong 操作"></a><code>win_buffer</code> 的 <code>Ping-pong</code> 操作</h4><p>首先，先将<code>data</code>数据存储到<code>win_buffer[0]</code>中，然后将<code>data</code>进行预取窗大小的<code>stride</code>后，将另外一片预取窗的<code>data</code>数据存储到<code>win_buffer[1]</code>中。与此同时，将<code>weight</code>值同样存储到<code>weight_buffer</code>中。数据进行预存储的同时，<code>channel</code>对<code>win_buffer[0]</code>中的数据进行输出。 然后下一轮的存储到<code>win_buffer[0]</code>中，而数据的传输则通过已经完成数据读入的<code>win_buffer[1]</code>进行，不断迭代数据的读入与读出进而实现<code>ping-pong操作</code>。</p><h4 id="weight-buffer-的重用与更新"><a href="#weight-buffer-的重用与更新" class="headerlink" title="weight_buffer 的重用与更新"></a><code>weight_buffer</code> 的重用与更新</h4><p>正常情况下<code>win_buffer</code>传出的数据为<code>(weight_dim1 + (CONV_GP_SIZE-1)*stride * weight_dim2 * weight_dim1</code>；而<code>weight_buffer</code>传出的数据为<code>weight_dim1 * weight_dim2 * weight_dim3</code><br>在一次<code>Item</code>循环内，<code>weight_buffer</code>内的数据在重用，但是每次进入Item循环的时候，都会不断地将<code>weight_buffer</code>的数据进行更新！</p><h4 id="memRead的-split-group-与-padding-处理"><a href="#memRead的-split-group-与-padding-处理" class="headerlink" title="memRead的 split[group] 与  padding 处理"></a>memRead的 <code>split[group]</code> 与  <code>padding</code> 处理</h4><ul><li><code>split[group]</code> 处理<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// special case when split==1, the output feature maps depend on only half the input feature maps</span></span><br><span class="line"><span class="keyword">if</span>(split==<span class="number">0</span>)</span><br><span class="line">  data_offset = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(out_idx_z_winbuf&lt;(weight_dim4_div_lane&gt;&gt;<span class="number">1</span>)) <span class="comment">// the lower half of the output feature maps depend on the lower half of the input</span></span><br><span class="line">  data_offset = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  data_offset = weight_dim3/VEC_SIZE;<span class="comment">// the upper half of the output feature maps depend on the upper half of the input</span></span><br></pre></td></tr></table></figure></li></ul><p>▶ 现在处理的<code>group</code>仅仅是<code>group = 1</code>与<code>group = 2</code>;<br>▶ <code>data_offset</code>作为padding后的索引地址,具体见下面padding 处理。</p><ul><li><code>padding</code> 处理<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// fetch feature map for the current group and caching in win buffer</span></span><br><span class="line"><span class="keyword">if</span>((feature_idx_dim1&gt;=padding &amp;&amp; feature_idx_dim1&lt;data_dim1+padding) &amp;&amp; (feature_idx_dim2&gt;=padding &amp;&amp; feature_idx_dim2&lt;data_dim2+padding))&#123;</span><br><span class="line"></span><br><span class="line">  data_vec = bottom[data_offset*data_dim1xdim2 + feature_idx_dim3*data_dim1xdim2 + (feature_idx_dim2-padding)* data_dim1 + (feature_idx_dim1-padding)];</span><br><span class="line">                  &#125;</span><br><span class="line"><span class="keyword">else</span>&#123; <span class="comment">// for padding (feature_idx&lt;padding or data_dim+padding&lt;=feature_idx&lt;data_dim+2*padding)</span></span><br><span class="line">  <span class="comment">// or invalid work-item in the last group set feature map to zeros (feature_idx&gt;=data_dim+2*padding)</span></span><br><span class="line">  #pragma unroll</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">char</span> vv=<span class="number">0</span>; vv&lt;VEC_SIZE; vv++)&#123;</span><br><span class="line">    data_vec.data[vv] = CZERO;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;memRead作用描述&quot;&gt;&lt;a href=&quot;#memRead作用描述&quot; class=&quot;headerlink&quot; title=&quot;memRead作用描述&quot;&gt;&lt;/a&gt;memRead作用描述&lt;/h3&gt;&lt;p&gt;memRead的作用主要是从&lt;code&gt;Global Memery&lt;/code&gt;中读取&lt;code&gt;data&lt;/code&gt; &lt;code&gt;weight&lt;/code&gt; &lt;code&gt;bias&lt;/code&gt; 然后设置并行化传输方式，处理卷积前的&lt;code&gt;Pading&lt;/code&gt;与&lt;code&gt;Group&lt;/code&gt;操作以及窗口的预缓冲，便于数据的读取。&lt;br&gt;&lt;img src=&quot;http://oz3lw4cji.bkt.clouddn.com/835691eecaad88c6d31edbdb0e110c4e.png&quot; alt=&quot;结构图&quot;&gt;&lt;br&gt;具体作用如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将向量化的&lt;code&gt;VEC_SIZE&lt;/code&gt;个&lt;code&gt;data&lt;/code&gt;数据复制&lt;code&gt;LANE_NUM&lt;/code&gt;份传到&lt;code&gt;data_ch&lt;/code&gt;中&lt;/li&gt;
&lt;li&gt;将向量化的&lt;code&gt;VEC_SIZE * LANE_NUM&lt;/code&gt;个&lt;code&gt;weight&lt;/code&gt;参数传到&lt;code&gt;weight_ch&lt;/code&gt;中&lt;/li&gt;
&lt;li&gt;将向量化的&lt;code&gt;LANE_NUM&lt;/code&gt;个&lt;code&gt;bias&lt;/code&gt;参数传到&lt;code&gt;bias_ch_in&lt;/code&gt;中&lt;/li&gt;
&lt;li&gt;处理&lt;code&gt;Pading&lt;/code&gt;以及&lt;code&gt;split[group]&lt;/code&gt;问题&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Window Buffer&lt;/code&gt;数据预取&lt;/p&gt;
    
    </summary>
    
      <category term="PipeCNN" scheme="http://xuke225.github.io.git/child/categories/PipeCNN/"/>
    
    
      <category term="PipeCNN" scheme="http://xuke225.github.io.git/child/tags/PipeCNN/"/>
    
      <category term="memRead" scheme="http://xuke225.github.io.git/child/tags/memRead/"/>
    
  </entry>
  
  <entry>
    <title>PipeCNN——memWrite</title>
    <link href="http://xuke225.github.io.git/child/2017/11/16/PipeCNN/memWrite/"/>
    <id>http://xuke225.github.io.git/child/2017/11/16/PipeCNN/memWrite/</id>
    <published>2017-11-15T16:00:00.000Z</published>
    <updated>2017-11-22T14:05:19.198Z</updated>
    
    <content type="html"><![CDATA[<h3 id="memWrite作用描述"><a href="#memWrite作用描述" class="headerlink" title="memWrite作用描述"></a>memWrite作用描述</h3><p>memWrite的主要功能是重新整理conv模块或者pooling模块pipe传输的数据，便于下一层启动卷积运算的时候数据的读取是连续的。<br>pipecnn首次进行数据传输的过程是首先从<code>.dat</code>文件中读取数据，然后在host端进行数据重排，但是host端的数据重排仅仅执行一次，之后的排序过程都是通过memWrite kernel 进行的。因此，memWrite的只要作用是进行数据重排。</p><h3 id="memWrite执行过程"><a href="#memWrite执行过程" class="headerlink" title="memWrite执行过程"></a>memWrite执行过程</h3><p><img src="http://oz3lw4cji.bkt.clouddn.com/memWrite%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B.gif" alt="memWrite执行过程"></p><a id="more"></a><h3 id="memWrite源码"><a href="#memWrite源码" class="headerlink" title="memWrite源码"></a>memWrite源码</h3><h4 id="Single-threaded-Kernel-lane-data接口-方式"><a href="#Single-threaded-Kernel-lane-data接口-方式" class="headerlink" title="Single-threaded Kernel (lane_data接口) 方式"></a>Single-threaded Kernel (lane_data接口) 方式</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Store Data to Global Memory</span></span><br><span class="line">__kernel</span><br><span class="line">__attribute__((reqd_work_group_size(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>)))</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">memWrite</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="comment">// Params Ports</span></span></span></span><br><span class="line"><span class="function"><span class="params">        uchar  out_dim1,</span></span></span><br><span class="line"><span class="function"><span class="params">        uchar  out_dim2,</span></span></span><br><span class="line"><span class="function"><span class="params">        ushort out_dim3,</span></span></span><br><span class="line"><span class="function"><span class="params">        ushort out_dim1xbatch, <span class="comment">// out_dim1 x sqrt(batch_size)</span></span></span></span><br><span class="line"><span class="function"><span class="params">        uint   out_dim1x2xbatch, <span class="comment">// out_dim1 x out_dim2 x batch_size</span></span></span></span><br><span class="line"><span class="function"><span class="params">        uchar  batch_indx_dim1,</span></span></span><br><span class="line"><span class="function"><span class="params">        uchar  batch_indx_dim2,</span></span></span><br><span class="line"><span class="function"><span class="params">        uchar  bypass,</span></span></span><br><span class="line"><span class="function"><span class="params">        uchar  padd_offset,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="comment">// Data Ports</span></span></span></span><br><span class="line">      __global lane_data * top __attribute__((xcl_data_pack(top)))</span><br><span class="line">      )</span><br><span class="line">&#123;</span><br><span class="line">        uchar index_z_item; <span class="comment">// max value 256</span></span><br><span class="line">        ushort index_z_group; <span class="comment">// max value 4096</span></span><br><span class="line"></span><br><span class="line">        channel_scal output __attribute__((xcl_data_pack(output)));</span><br><span class="line">        uint local_num = LANE_NUM;</span><br><span class="line">        uint loop_time = (out_dim1*out_dim2*out_dim3);</span><br><span class="line">        __local DPTYPE buffer[LANE_NUM] __attribute__((xcl_array_partition(complete,<span class="number">1</span>)));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span> loop_z=<span class="number">0</span>; loop_z&lt;out_dim3; loop_z+=LANE_NUM) &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span> loop_y=<span class="number">0</span>; loop_y&lt;out_dim2; loop_y++) &#123;</span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span> loop_x=<span class="number">0</span>; loop_x&lt;out_dim1; loop_x++) &#123;</span><br><span class="line">                                <span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span> loop=<span class="number">0</span>; loop&lt;LANE_NUM; loop+= VEC_SIZE) &#123;</span><br><span class="line">                                        <span class="keyword">if</span>(loop==<span class="number">0</span>) &#123;</span><br><span class="line">                                                <span class="keyword">if</span>((bypass&amp;<span class="number">0x01</span>)==<span class="number">0x01</span>) &#123;</span><br><span class="line">                                                        bypass_ch_read_pipe_block(output);</span><br><span class="line">                                                &#125;</span><br><span class="line">                                                <span class="keyword">else</span>&#123;</span><br><span class="line">                                                        pool_ch_read_pipe_block(output);</span><br><span class="line">                                                &#125;</span><br><span class="line">                                                <span class="comment">// store the vectorized output into local buffer</span></span><br><span class="line">                                                __attribute__((opencl_unroll_hint))</span><br><span class="line">                                                <span class="keyword">for</span>(uchar ll=<span class="number">0</span>; ll&lt;LANE_NUM; ll++) &#123;</span><br><span class="line">                                                        buffer[ll]=output.lane[ll];</span><br><span class="line">                                                &#125;</span><br><span class="line">                                        &#125;</span><br><span class="line">                                        index_z_group = (loop_z+loop-padd_offset)/VEC_SIZE;</span><br><span class="line">                                        index_z_item  = (loop_z+loop-padd_offset)%VEC_SIZE;</span><br><span class="line">                                        <span class="keyword">if</span>((loop_z+loop-padd_offset)&lt;out_dim3 &amp;&amp; (loop_z+loop&gt;=padd_offset)) &#123;</span><br><span class="line">                                                __attribute__((opencl_unroll_hint))</span><br><span class="line">                                                <span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">char</span> vv=<span class="number">0</span>; vv&lt;VEC_SIZE; vv++) &#123;</span><br><span class="line">                                                        top[index_z_group*out_dim1x2xbatch + (loop_y+batch_indx_dim2*out_dim2) * out_dim1xbatch + (loop_x+batch_indx_dim1*out_dim1)].data[vv] = buffer[loop+vv];</span><br><span class="line">                                                &#125;</span><br><span class="line">                                        &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Single-threaded-Kernel-DPTYPE接口-方式"><a href="#Single-threaded-Kernel-DPTYPE接口-方式" class="headerlink" title="Single-threaded Kernel (DPTYPE接口)方式"></a>Single-threaded Kernel (DPTYPE接口)方式</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Store Data to Global Memory</span></span><br><span class="line">__kernel</span><br><span class="line">__attribute__((reqd_work_group_size(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>)))</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">memWrite</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="comment">// Params Ports</span></span></span></span><br><span class="line"><span class="function"><span class="params">    uchar  out_dim1,</span></span></span><br><span class="line"><span class="function"><span class="params">    uchar  out_dim2,</span></span></span><br><span class="line"><span class="function"><span class="params">    ushort out_dim3,</span></span></span><br><span class="line"><span class="function"><span class="params">    ushort out_dim1xbatch, <span class="comment">// out_dim1 x sqrt(batch_size)</span></span></span></span><br><span class="line"><span class="function"><span class="params">    uint   out_dim1x2xbatch, <span class="comment">// out_dim1 x out_dim2 x batch_size</span></span></span></span><br><span class="line"><span class="function"><span class="params">    uchar  batch_indx_dim1,</span></span></span><br><span class="line"><span class="function"><span class="params">    uchar  batch_indx_dim2,</span></span></span><br><span class="line"><span class="function"><span class="params">    uchar  bypass,</span></span></span><br><span class="line"><span class="function"><span class="params">    uchar  padd_offset,</span></span></span><br><span class="line"><span class="function"><span class="params">    __global DPTYPE *<span class="keyword">restrict</span> top</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    uchar index_z_item; <span class="comment">// max value 256</span></span><br><span class="line">    ushort index_z_group; <span class="comment">// max value 4096</span></span><br><span class="line"></span><br><span class="line">    channel_scal output __attribute__((xcl_data_pack(output)));</span><br><span class="line">    uint local_num = LANE_NUM;</span><br><span class="line">    uint loop_time =  out_dim3+<span class="number">2</span>*padd_offset;</span><br><span class="line">    __local DPTYPE buffer[LANE_NUM] __attribute__((xcl_array_partition(complete,<span class="number">1</span>)));</span><br><span class="line">    LOOP1:</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span> loop_z=<span class="number">0</span>; loop_z&lt;loop_time; loop_z+=LANE_NUM) &#123;</span><br><span class="line">        LOOP2:</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span> loop_y=<span class="number">0</span>; loop_y&lt;out_dim2; loop_y++) &#123;</span><br><span class="line">            LOOP3:</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span> loop_x=<span class="number">0</span>; loop_x&lt;out_dim1; loop_x++) &#123;</span><br><span class="line">                LOOP4:</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span> loop=<span class="number">0</span>; loop&lt;LANE_NUM; loop++) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(loop==<span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span>((bypass&amp;<span class="number">0x01</span>)==<span class="number">0x01</span>) &#123;</span><br><span class="line">                            bypass_ch_read_pipe_block(output);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            pool_ch_read_pipe_block(output);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// store the vectorized output into local buffer</span></span><br><span class="line">                        __attribute__((opencl_unroll_hint))</span><br><span class="line">                        LOOP5:</span><br><span class="line">                        <span class="keyword">for</span>(uchar ll=<span class="number">0</span>; ll&lt;LANE_NUM; ll++) &#123;</span><br><span class="line">                            buffer[ll]=output.lane[ll];</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    index_z_group = (loop_z+loop-padd_offset)/VEC_SIZE;</span><br><span class="line">                    index_z_item  = (loop_z+loop-padd_offset)%VEC_SIZE;</span><br><span class="line">                    <span class="comment">//printf("index_z_group = %d  , index_z_item = %d \n",index_z_group ,  index_z_item);</span></span><br><span class="line">                    <span class="keyword">if</span>((loop_z+loop-padd_offset)&lt;out_dim3 &amp;&amp; (loop_z+loop&gt;=padd_offset)) &#123;</span><br><span class="line">                        top[index_z_group*out_dim1x2xbatch*VEC_SIZE + (loop_y+batch_indx_dim2*out_dim2) * out_dim1xbatch*VEC_SIZE + (loop_x+batch_indx_dim1*out_dim1) * VEC_SIZE+index_z_item] = buffer[loop];</span><br><span class="line">                        <span class="meta">#<span class="meta-keyword">ifdef</span> DEBUG_MEMWR</span></span><br><span class="line">                        <span class="comment">//printf("index_z_group = %d  , index_z_item = %d \n",index_z_group ,  index_z_item);</span></span><br><span class="line">                        <span class="keyword">if</span>((loop_z+loop-padd_offset) &lt; <span class="number">20</span>)&#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"x=%d,y=%d,z=%d,i_g=%d,i_i=%d,l=%d,q=%f\n"</span>, loop_x ,loop_y, loop_z+loop ,index_z_group , index_z_item, loop , buffer[loop] );</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="NDRange-Kernel-方式"><a href="#NDRange-Kernel-方式" class="headerlink" title="NDRange Kernel 方式"></a>NDRange Kernel 方式</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">__kernel</span><br><span class="line">__attribute__((reqd_work_group_size(<span class="number">1</span>,<span class="number">1</span>,LANE_NUM)))</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">memWrite</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="comment">// Params Ports</span></span></span></span><br><span class="line"><span class="function"><span class="params">        uchar  out_dim1,</span></span></span><br><span class="line"><span class="function"><span class="params">        uchar  out_dim2,</span></span></span><br><span class="line"><span class="function"><span class="params">        ushort out_dim3,</span></span></span><br><span class="line"><span class="function"><span class="params">        ushort out_dim1xbatch, <span class="comment">// out_dim1 x sqrt(batch_size)</span></span></span></span><br><span class="line"><span class="function"><span class="params">        uint   out_dim1x2xbatch, <span class="comment">// out_dim1 x out_dim2 x batch_size</span></span></span></span><br><span class="line"><span class="function"><span class="params">        uchar  batch_indx_dim1,</span></span></span><br><span class="line"><span class="function"><span class="params">        uchar  batch_indx_dim2,</span></span></span><br><span class="line"><span class="function"><span class="params">        uchar  bypass,</span></span></span><br><span class="line"><span class="function"><span class="params">        uchar  padd_offset,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="comment">// Data Ports</span></span></span></span><br><span class="line"><span class="function"><span class="params">__global DPTYPE *<span class="keyword">restrict</span> top</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">uchar  global_x = get_global_id(<span class="number">0</span>); <span class="comment">// max value 256</span></span><br><span class="line">uchar  global_y = get_global_id(<span class="number">1</span>); <span class="comment">// max value 256</span></span><br><span class="line">ushort global_z = get_global_id(<span class="number">2</span>); <span class="comment">// max value 4096</span></span><br><span class="line">uchar  local_x = get_local_id(<span class="number">0</span>); <span class="comment">// max value 256</span></span><br><span class="line">uchar  local_y = get_local_id(<span class="number">1</span>); <span class="comment">// max value 256</span></span><br><span class="line">uchar  local_z = get_local_id(<span class="number">2</span>); <span class="comment">// max value 256</span></span><br><span class="line"></span><br><span class="line">uchar  index_z_item; <span class="comment">// max value 256</span></span><br><span class="line">ushort index_z_group;<span class="comment">// max value 4096</span></span><br><span class="line"></span><br><span class="line">channel_scal   output;</span><br><span class="line">__local DPTYPE buffer[LANE_NUM];</span><br><span class="line"></span><br><span class="line"><span class="comment">// use the first local work-item to read the vectorized output data from channel</span></span><br><span class="line"><span class="keyword">if</span>(local_z==<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>((bypass&amp;<span class="number">0x01</span>)==<span class="number">0x01</span>)</span><br><span class="line">output = read_channel_altera(bypass_ch);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">output = read_channel_altera(pool_ch);</span><br><span class="line"></span><br><span class="line"><span class="comment">// store the vectorized output into local buffer</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> unroll</span></span><br><span class="line"><span class="keyword">for</span>(uchar ll=<span class="number">0</span>; ll&lt;LANE_NUM; ll++) &#123;</span><br><span class="line">buffer[ll]=output.lane[ll];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">barrier(CLK_LOCAL_MEM_FENCE);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// fetch data from local buffer and write back to DDR</span></span><br><span class="line"><span class="comment">// perform vectorization in dim3 (global_z) by combining multiple DPTYPE data into lane_data type</span></span><br><span class="line">index_z_group = (global_z-padd_offset)/VEC_SIZE;</span><br><span class="line">index_z_item  = (global_z-padd_offset)%VEC_SIZE;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>((global_z-padd_offset)&lt;out_dim3 &amp;&amp; (global_z&gt;=padd_offset)) &#123;</span><br><span class="line"></span><br><span class="line">top[index_z_group*out_dim1x2xbatch*VEC_SIZE + (global_y+batch_indx_dim2*out_dim2)*out_dim1xbatch*VEC_SIZE + (global_x+batch_indx_dim1*out_dim1)*VEC_SIZE + index_z_item] = buffer[local_z];</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> DEBUG_MEMWR</span></span><br><span class="line"><span class="comment">//if((global_z-padd_offset) == 0)&#123;</span></span><br><span class="line"><span class="comment">//for(unsigned char ll=0; ll&lt;LANE_NUM; ll++)&#123;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"MemWr results= %f (x=%d, y=%d, z=%d, ll=%d)\n"</span>, (<span class="keyword">float</span>)output.lane[<span class="number">0</span>], global_x, global_y, global_z, <span class="number">0</span>);</span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">barrier(CLK_LOCAL_MEM_FENCE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="memWeite处理细节"><a href="#memWeite处理细节" class="headerlink" title="memWeite处理细节"></a>memWeite处理细节</h3><h4 id="LANE-NUM-与-VEC-SIZE-大小不一致"><a href="#LANE-NUM-与-VEC-SIZE-大小不一致" class="headerlink" title="LANE_NUM 与 VEC_SIZE 大小不一致"></a>LANE_NUM 与 VEC_SIZE 大小不一致</h4><p>不一致的情况下，将LANE_NUM分别对VEC_SIZE进行除法和取余数操作（公式如下），然后根据除法结果和余数结果进行对应的寻址写入即可。</p><p>$$index_z_group = (global_z - padd_offset)/VEC_SIZE$$</p><p>$$index_z_item = (global_z - padd_offset)\%VEC_SIZE$$</p><h4 id="LANE-NUM-不是-2的幂次"><a href="#LANE-NUM-不是-2的幂次" class="headerlink" title="LANE_NUM 不是 2的幂次"></a>LANE_NUM 不是 2的幂次</h4><p>源码中对于 <code>NDRange Kernel</code> 方式和 <code>Single-threaded Kernel (DPTYPE接口)</code> 方式可以对<code>LANE_NUM</code>不是2的幂次进行处理，而对于<code>Single-threaded Kernel (lane_data接口)</code> 方式则不能处理非2的幂次形式。</p><h4 id="关于memWrite的padding问题"><a href="#关于memWrite的padding问题" class="headerlink" title="关于memWrite的padding问题"></a>关于memWrite的padding问题</h4><p><code>memWrit</code>e之所以进行<code>padding</code>操作，主要是处理上面所说的<code>LANE_NUM</code>不是2的幂次的现象。<br>举例说明：比如<code>LANE_NUM = 6</code> 、 <code>VEC_SIZE = 4</code> vgg16 conv1操作结束后,通过<code>pipe</code>或<code>channal</code>传输给<code>memWrit</code>kernel的数据量为6，<br>conv1结束后输出的<code>feature map</code>大小为<code>224 * 224 * 64</code> 深度64不是<code>LANE_NUM = 6</code>的倍数，因此，首先将深度进行<code>padding</code>成为66，然后再进行赋值操作。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;memWrite作用描述&quot;&gt;&lt;a href=&quot;#memWrite作用描述&quot; class=&quot;headerlink&quot; title=&quot;memWrite作用描述&quot;&gt;&lt;/a&gt;memWrite作用描述&lt;/h3&gt;&lt;p&gt;memWrite的主要功能是重新整理conv模块或者pooling模块pipe传输的数据，便于下一层启动卷积运算的时候数据的读取是连续的。&lt;br&gt;pipecnn首次进行数据传输的过程是首先从&lt;code&gt;.dat&lt;/code&gt;文件中读取数据，然后在host端进行数据重排，但是host端的数据重排仅仅执行一次，之后的排序过程都是通过memWrite kernel 进行的。因此，memWrite的只要作用是进行数据重排。&lt;/p&gt;
&lt;h3 id=&quot;memWrite执行过程&quot;&gt;&lt;a href=&quot;#memWrite执行过程&quot; class=&quot;headerlink&quot; title=&quot;memWrite执行过程&quot;&gt;&lt;/a&gt;memWrite执行过程&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://oz3lw4cji.bkt.clouddn.com/memWrite%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B.gif&quot; alt=&quot;memWrite执行过程&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="PipeCNN" scheme="http://xuke225.github.io.git/child/categories/PipeCNN/"/>
    
    
      <category term="PipeCNN" scheme="http://xuke225.github.io.git/child/tags/PipeCNN/"/>
    
      <category term="memWrite" scheme="http://xuke225.github.io.git/child/tags/memWrite/"/>
    
  </entry>
  
  <entry>
    <title>gmem carry dependency 分析</title>
    <link href="http://xuke225.github.io.git/child/2017/11/15/SDAccel/%E4%BC%98%E5%8C%96/kernel_to_gmem/gmem-carry-dependency-%E5%88%86%E6%9E%90/"/>
    <id>http://xuke225.github.io.git/child/2017/11/15/SDAccel/优化/kernel_to_gmem/gmem-carry-dependency-分析/</id>
    <published>2017-11-14T16:00:00.000Z</published>
    <updated>2017-11-24T02:01:44.245Z</updated>
    
    <content type="html"><![CDATA[<h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><ul><li>方案一  源码<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J_CNT       2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> I_CNT       4</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFFER_SIZE I_CNT*J_CNT</span></span><br><span class="line"></span><br><span class="line">kernel __attribute__((reqd_work_group_size(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>)))</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vector_add</span><span class="params">(__global <span class="keyword">int</span>* c,</span></span></span><br><span class="line"><span class="function"><span class="params">               __global <span class="keyword">const</span> <span class="keyword">int</span>* a,</span></span></span><br><span class="line"><span class="function"><span class="params">               __global <span class="keyword">const</span> <span class="keyword">int</span>* b,</span></span></span><br><span class="line"><span class="function"><span class="params">               <span class="keyword">const</span> <span class="keyword">int</span> n_elements)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   local <span class="keyword">int</span> arrayA[BUFFER_SIZE];</span><br><span class="line">   local <span class="keyword">int</span> arrayB[BUFFER_SIZE];</span><br><span class="line">   local <span class="keyword">int</span> arrayC[BUFFER_SIZE];</span><br><span class="line"></span><br><span class="line">   __attribute__((xcl_pipeline_loop))</span><br><span class="line">loop_1:</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; I_CNT; i++) &#123;</span><br><span class="line">       <span class="comment">//__attribute__((xcl_pipeline_loop))</span></span><br><span class="line">       loop_2:</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; J_CNT; j++) &#123;</span><br><span class="line">           arrayA[i * J_CNT + j] = a[i * J_CNT + j];</span><br><span class="line">           arrayB[i * J_CNT + j] = b[i * J_CNT + j];</span><br><span class="line">           c[i * J_CNT + j] = arrayA[i * J_CNT + j]+arrayB[i * J_CNT + j];</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><ul><li><p>方案一  kernel 设置<br><img src="http://oz3lw4cji.bkt.clouddn.com/6761df957be09d56c49a393122fee9a3.png" alt=""></p></li><li><p>方案一  综合结果<br><img src="http://oz3lw4cji.bkt.clouddn.com/44244df7984202643cc6c31cda5b9b57.png" alt=""><br><img src="http://oz3lw4cji.bkt.clouddn.com/8641efad2576de07149a4a88f3a1ae03.png" alt=""></p></li><li><p>方案一  HLS log 文件<br><img src="http://oz3lw4cji.bkt.clouddn.com/050993521dabc3db276d2acdf9a666e5.png" alt=""></p></li><li><p>方案一  Performance图<br><img src="http://oz3lw4cji.bkt.clouddn.com/2c8d0ec01cd2286b9eaf77dff54c4316.png" alt=""><br><img src="http://oz3lw4cji.bkt.clouddn.com/0e9c17ba66f84433714e488fd3ce0f31.png" alt=""><br><img src="http://oz3lw4cji.bkt.clouddn.com/5ac4e9160997b061791ff6ccc7cd312f.png" alt=""><br><img src="http://oz3lw4cji.bkt.clouddn.com/9dc9c6e9d56d4468db807068b236994a.png" alt=""><br><img src="http://oz3lw4cji.bkt.clouddn.com/5dda1f895a647e9e45ccb6a00b4476e6.png" alt=""></p></li></ul><h3 id="方案二（修改gmem位宽为64bit）"><a href="#方案二（修改gmem位宽为64bit）" class="headerlink" title="方案二（修改gmem位宽为64bit）"></a>方案二（修改gmem位宽为64bit）</h3><ul><li><p>方案二  kernel 设置<br><img src="http://oz3lw4cji.bkt.clouddn.com/5dda1f895a647e9e45ccb6a00b4476e6.png" alt=""></p></li><li><p>为何为64bit?<br>首先，源码中对外层<code>loop_1</code>进行pipeline,因此对于内层的<code>loop_2</code>自动进行uroll展开。内层for循环的边界为<code>J_CNT = 2</code>因此将<code>loop_2</code> 代码<br>展开为如下代码形式。因此需要对<code>a</code>和<code>b</code>进行两次读取，对<code>a</code>请求一次读入，对<code>b</code>请求一次读入。一拍只能对gmem请求一次，因为是并行执行因此<code>a</code>有两个数据<code>a[i * J_CNT + 0]</code> 和<code>a[i * J_CNT + 1]</code>需要读入所以接口位宽为<code>sizeof(int) * 2</code>。<br>对于代码来说<code>gmem</code>位宽应该等于<code>sizeof(int) * J_CNT</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// loop_2 uroll 展开过程</span></span><br><span class="line">    arrayA[i * J_CNT + <span class="number">0</span>] = a[i * J_CNT + <span class="number">0</span>];</span><br><span class="line">    arrayA[i * J_CNT + <span class="number">1</span>] = a[i * J_CNT + <span class="number">1</span>];</span><br><span class="line">    arrayB[i * J_CNT + <span class="number">0</span>] = b[i * J_CNT + <span class="number">0</span>];</span><br><span class="line">    arrayB[i * J_CNT + <span class="number">1</span>] = b[i * J_CNT + <span class="number">1</span>];</span><br></pre></td></tr></table></figure></li><li><p>方案二  综合结果<br><img src="http://oz3lw4cji.bkt.clouddn.com/7dd3ae852d90aca8b5afa8836c6b0848.png" alt=""><br><img src="http://oz3lw4cji.bkt.clouddn.com/56606e7b4da8d4cc13d267d7cbec198c.png" alt=""></p></li><li><p>方案二  HLS log文件<br><img src="http://oz3lw4cji.bkt.clouddn.com/937b1ca302f2ee702e4cecd83a63bea8.png" alt=""></p></li><li><p>方案二  Performance图<br><img src="http://oz3lw4cji.bkt.clouddn.com/18e958245b430f116c095fb59f21a6e7.png" alt=""><br><img src="http://oz3lw4cji.bkt.clouddn.com/4ca1ed6e8e0d08cd0e2e6a2f074abf94.png" alt=""><br><img src="http://oz3lw4cji.bkt.clouddn.com/acf0ff0829e335425ca144cff64031ee.png" alt=""><br><img src="http://oz3lw4cji.bkt.clouddn.com/acf0ff0829e335425ca144cff64031ee.png" alt=""><br><img src="http://oz3lw4cji.bkt.clouddn.com/e0408803736b1b7c7ee46344555f1d0b.png" alt=""></p></li></ul><h3 id="方案二-II-2-原因分析"><a href="#方案二-II-2-原因分析" class="headerlink" title="方案二 II = 2 原因分析"></a>方案二 II = 2 原因分析</h3><ul><li><p>修改源码,解决gmem ii = 2 问题(屏蔽掉b向arrayB赋值)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J_CNT       2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> I_CNT       4</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFFER_SIZE I_CNT*J_CNT</span></span><br><span class="line"></span><br><span class="line">kernel __attribute__((reqd_work_group_size(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>)))</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vector_add</span><span class="params">(__global <span class="keyword">int</span>* c,</span></span></span><br><span class="line"><span class="function"><span class="params">               __global <span class="keyword">const</span> <span class="keyword">int</span>* a,</span></span></span><br><span class="line"><span class="function"><span class="params">               __global <span class="keyword">const</span> <span class="keyword">int</span>* b,</span></span></span><br><span class="line"><span class="function"><span class="params">               <span class="keyword">const</span> <span class="keyword">int</span> n_elements)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   local <span class="keyword">int</span> arrayA[BUFFER_SIZE];</span><br><span class="line">   local <span class="keyword">int</span> arrayB[BUFFER_SIZE];</span><br><span class="line">   local <span class="keyword">int</span> arrayC[BUFFER_SIZE];</span><br><span class="line"></span><br><span class="line">   __attribute__((xcl_pipeline_loop))</span><br><span class="line">loop_1:</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; I_CNT; i++) &#123;</span><br><span class="line">       <span class="comment">//__attribute__((xcl_pipeline_loop))</span></span><br><span class="line">       loop_2:</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; J_CNT; j++) &#123;</span><br><span class="line">           arrayA[i * J_CNT + j] = a[i * J_CNT + j];</span><br><span class="line"><span class="comment">//            arrayB[i * J_CNT + j] = b[i * J_CNT + j];</span></span><br><span class="line">           c[i * J_CNT + j] = arrayA[i * J_CNT + j];<span class="comment">//+arrayB[i * J_CNT + j];</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>综合结果分析<br><img src="http://oz3lw4cji.bkt.clouddn.com/10f729b114b275541fcfc02fdb391bae.png" alt=""></p></li><li><p>HLS log文件<br><img src="http://oz3lw4cji.bkt.clouddn.com/5c773a40ac3464dd18c91f35c9852037.png" alt=""></p></li></ul><ul><li>Performence图</li></ul><p><img src="http://oz3lw4cji.bkt.clouddn.com/d0ff83cd0c8288e0df9180bda08b3f68.png" alt=""><br><img src="http://oz3lw4cji.bkt.clouddn.com/0b746748e1f0ddca79d39be4956d2372.png" alt=""><br><img src="http://oz3lw4cji.bkt.clouddn.com/8db95363cb4843a7a2df6a8a139a212b.png" alt=""></p><ul><li>为何源程序 II = 2？<br>该问题还要从<code>loop_2</code> unroll说起<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// loop_2 uroll 展开过程</span></span><br><span class="line">    arrayA[i * J_CNT + <span class="number">0</span>] = a[i * J_CNT + <span class="number">0</span>];</span><br><span class="line">    arrayA[i * J_CNT + <span class="number">1</span>] = a[i * J_CNT + <span class="number">1</span>];</span><br><span class="line">    arrayB[i * J_CNT + <span class="number">0</span>] = b[i * J_CNT + <span class="number">0</span>];</span><br><span class="line">    arrayB[i * J_CNT + <span class="number">1</span>] = b[i * J_CNT + <span class="number">1</span>];</span><br></pre></td></tr></table></figure></li></ul><p>关键原因是<strong>一拍只能对<code>gmem</code>请求一次</strong> 因为是并行执行因此第一拍对<code>gmem</code>进行<code>a</code>的读请求，<code>a</code>有两个数据<code>a[i * J_CNT + 0]</code> 和<code>a[i * J_CNT + 1]</code>需要读入,同理下一拍对<code>gmem</code>进行<code>b</code>的请求，<code>b</code>有两个数据<code>b[i * J_CNT + 0]</code> 和<code>b[i * J_CNT + 1]</code>需要读入。<br>因此解决办法也不言而喻：一个<code>gmem</code>只能一次读请求，但是综合多个<code>gmem</code>便可以在一拍内分别进行请求！<br><img src="http://oz3lw4cji.bkt.clouddn.com/e15fb942130d0657331e4332e94a02dd.png" alt=""></p><h3 id="方案三（解决-II-2问题）"><a href="#方案三（解决-II-2问题）" class="headerlink" title="方案三（解决 II = 2问题）"></a>方案三（解决 II = 2问题）</h3><ul><li><p>方案三 源码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> J_CNT       2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> I_CNT       4</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFFER_SIZE I_CNT*J_CNT</span></span><br><span class="line"></span><br><span class="line">kernel __attribute__((reqd_work_group_size(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>)))</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vector_add</span><span class="params">(__global <span class="keyword">int</span>* c,</span></span></span><br><span class="line"><span class="function"><span class="params">               __global <span class="keyword">const</span> <span class="keyword">int</span>* a,</span></span></span><br><span class="line"><span class="function"><span class="params">               __global <span class="keyword">const</span> <span class="keyword">int</span>* b,</span></span></span><br><span class="line"><span class="function"><span class="params">               <span class="keyword">const</span> <span class="keyword">int</span> n_elements)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   local <span class="keyword">int</span> arrayA[BUFFER_SIZE];</span><br><span class="line">   local <span class="keyword">int</span> arrayB[BUFFER_SIZE];</span><br><span class="line">   local <span class="keyword">int</span> arrayC[BUFFER_SIZE];</span><br><span class="line"></span><br><span class="line">   __attribute__((xcl_pipeline_loop))</span><br><span class="line">loop_1:</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; I_CNT; i++) &#123;</span><br><span class="line">       <span class="comment">//__attribute__((xcl_pipeline_loop))</span></span><br><span class="line">       loop_2:</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; J_CNT; j++) &#123;</span><br><span class="line">           arrayA[i * J_CNT + j] = a[i * J_CNT + j];</span><br><span class="line">           arrayB[i * J_CNT + j] = b[i * J_CNT + j];</span><br><span class="line">           c[i * J_CNT + j] = arrayA[i * J_CNT + j]+arrayB[i * J_CNT + j];</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>方案三 设置<br><img src="http://oz3lw4cji.bkt.clouddn.com/e598125028eea15c73df4998ec157285.png" alt=""></p></li><li>方案三 综合结果<br><img src="http://oz3lw4cji.bkt.clouddn.com/439580baf77868142d0a9b7858ac7860.png" alt=""><br><img src="http://oz3lw4cji.bkt.clouddn.com/b3a0106b044dd3b1b7b268b0ee259611.png" alt=""><br><img src="http://oz3lw4cji.bkt.clouddn.com/103f16fb347355a4670592992b0173ed.png" alt=""><br><img src="http://oz3lw4cji.bkt.clouddn.com/81d167188d4f054e9e0f1061dae5c174.png" alt=""></li></ul><ul><li>方案三 HLS log文件<br><img src="http://oz3lw4cji.bkt.clouddn.com/11a495df12fd1151547727906a48ae33.png" alt=""></li></ul><ul><li>方案三 Performence图<br><img src="http://oz3lw4cji.bkt.clouddn.com/6778fada1a100f886c7ff480c6c151a7.png" alt=""><br><img src="http://oz3lw4cji.bkt.clouddn.com/a952567ee07875ac7787e6b0d2774891.png" alt=""><br><img src="http://oz3lw4cji.bkt.clouddn.com/a5ed8c3f40c32a85238715b109ccc2eb.png" alt=""></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>产生gmem carry dependency的两种解决办法：<ul><li>进行 gmem位宽大小的调整 32bit – 512bit</li><li>多个 __global 参数采用多个gmem进行数据传输（max memory ports）</li></ul></li></ul><h3 id="TODO-采用pipe传输（做一个memRead）"><a href="#TODO-采用pipe传输（做一个memRead）" class="headerlink" title="TODO 采用pipe传输（做一个memRead）"></a>TODO 采用pipe传输（做一个memRead）</h3><ul><li>问题（当数据为非32bit的倍数-512bit）</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;方案一&quot;&gt;&lt;a href=&quot;#方案一&quot; class=&quot;headerlink&quot; title=&quot;方案一&quot;&gt;&lt;/a&gt;方案一&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;方案一  源码&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; J_CNT       2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; I_CNT       4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; BUFFER_SIZE I_CNT*J_CNT&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kernel __attribute__((reqd_work_group_size(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;vector_add&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(__global &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;* c,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;               __global &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;* a,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;               __global &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;* b,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;               &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n_elements)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   local &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; arrayA[BUFFER_SIZE];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   local &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; arrayB[BUFFER_SIZE];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   local &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; arrayC[BUFFER_SIZE];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   __attribute__((xcl_pipeline_loop))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;loop_1:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; I_CNT; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;comment&quot;&gt;//__attribute__((xcl_pipeline_loop))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       loop_2:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j &amp;lt; J_CNT; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           arrayA[i * J_CNT + j] = a[i * J_CNT + j];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           arrayB[i * J_CNT + j] = b[i * J_CNT + j];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           c[i * J_CNT + j] = arrayA[i * J_CNT + j]+arrayB[i * J_CNT + j];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="SDAccel" scheme="http://xuke225.github.io.git/child/categories/SDAccel/"/>
    
      <category term="优化" scheme="http://xuke225.github.io.git/child/categories/SDAccel/%E4%BC%98%E5%8C%96/"/>
    
      <category term="kernel_to_gmem" scheme="http://xuke225.github.io.git/child/categories/SDAccel/%E4%BC%98%E5%8C%96/kernel-to-gmem/"/>
    
    
      <category term="SDAccel" scheme="http://xuke225.github.io.git/child/tags/SDAccel/"/>
    
      <category term="优化" scheme="http://xuke225.github.io.git/child/tags/%E4%BC%98%E5%8C%96/"/>
    
      <category term="kernel_to_gmem" scheme="http://xuke225.github.io.git/child/tags/kernel-to-gmem/"/>
    
  </entry>
  
  <entry>
    <title>host overlap</title>
    <link href="http://xuke225.github.io.git/child/2017/11/10/SDAccel/%E4%BC%98%E5%8C%96/host/overlap/"/>
    <id>http://xuke225.github.io.git/child/2017/11/10/SDAccel/优化/host/overlap/</id>
    <published>2017-11-09T16:00:00.000Z</published>
    <updated>2017-11-24T02:00:58.838Z</updated>
    
    <content type="html"><![CDATA[<h2 id="例程描述"><a href="#例程描述" class="headerlink" title="例程描述"></a>例程描述</h2><p>这个示例将演示在一个应用中用户在主机端（CPU）与FPGA交叠的运算,从而达到将数据传输隐藏在计算过程中，提高数据传输效率。其中包括异步操作和事件对象。</p><h2 id="主要学习知识点"><a href="#主要学习知识点" class="headerlink" title="主要学习知识点"></a>主要学习知识点</h2><ul><li>Key Concepts<ul><li>OpenCL API</li><li>Host 和 FPGA 同步 Synchronize Host and FPGA</li><li>处理过程异步 Asynchronous Processing</li><li>事件 Events</li><li>异步拷贝 Asynchronous memcpy</li><li>Double Buffer 乒乓</li><li>Burst Transfer 突发传输</li></ul></li><li>Keywords<ul><li>cl_event</li><li>CL_QUEUE_OUT_OF_ORDER_EXEC_MODE_ENABLE</li><li>clEnqueueMigrateMemObjects</li><li>clEnqueueMapBuffer</li></ul></li></ul><a id="more"></a><ul><li>clEnqueueReadBuffer VS clEnqueueWriteBuffer VS clEnqueueMapBuffer<ul><li>clEnqueueReadBuffer<ul><li>从Cl_mem读回host mem（就算Cl_mem是直接使用host mem实现的，想读它的内容，还是要这样读回来，可以看做cl_mem是更高一层封装）</li></ul></li><li>clEnqueueWriteBuffer<ul><li>使用host_mem的值写cl_mem</li></ul></li><li>clEnqueueMapBuffer<ul><li>在Cl_mem和host mem之间做映射</li><li>这个函数比较特殊,在创建buf时有一种方法CL_MEM_USE_HOST_PTR，是直接让device使用host上已有的一块的mem（p1）做buf，但是这个产生的CL_mem（p2）经过计算后值会改变,p2改变后通常p1不会被改变，因为虽然用的一块物理空间，但是cl_mem是高层封装，和host上的mem还是不一样的，要想使p1同步到p2的最新值，就要调用这句map</li></ul></li></ul></li></ul><h2 id="主机端代码分析"><a href="#主机端代码分析" class="headerlink" title="主机端代码分析"></a>主机端代码分析</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  Overlap Host Code</span></span><br><span class="line"><span class="comment">  There are many applications where all of the data cannot reside in an FPGA.</span></span><br><span class="line"><span class="comment">  For example, the data is too big to fit in an FPGA or the data is being</span></span><br><span class="line"><span class="comment">  streamed from a sensor or the network. In these situations data must be</span></span><br><span class="line"><span class="comment">  transferred to the host memory to the FPGA before the computation can be</span></span><br><span class="line"><span class="comment">  performed.</span></span><br><span class="line"><span class="comment">  Because PCIe is an full-duplex interconnect, you can transfer data to and from</span></span><br><span class="line"><span class="comment">  the FPGA simultaneously. Xilinx FPGAs can also perform computations during</span></span><br><span class="line"><span class="comment">  these data transfers. Performing all three of these operations at the same</span></span><br><span class="line"><span class="comment">  time allows you to keep the FPGA busy and take full advantage of all of the</span></span><br><span class="line"><span class="comment">  hardware on your system.</span></span><br><span class="line"><span class="comment">  In this example, we will demonstrate how to perform this using an out of order</span></span><br><span class="line"><span class="comment">  command queue.</span></span><br><span class="line"><span class="comment">  +---------+---------+---------+----------+---------+---------+---------</span></span><br><span class="line"><span class="comment">  | WriteA1 | WriteB1 | WriteA2 | Write B2 | WriteA1 | WriteB1 |   Wri...</span></span><br><span class="line"><span class="comment">  +---------+---------+---------+----------+---------+---------+---------</span></span><br><span class="line"><span class="comment">                      |       Compute1     |     Compute2      |  Compu...</span></span><br><span class="line"><span class="comment">                      +--------------------+-------------------+--------+</span></span><br><span class="line"><span class="comment">                                           | ReadC1 |          | ReadC2 |</span></span><br><span class="line"><span class="comment">                                           +--------+          +--------+</span></span><br><span class="line"><span class="comment">  Many OpenCL commands are asynchronous. This means that whenever you call an</span></span><br><span class="line"><span class="comment">  OpenCL function, the function will return before the operation has completed.</span></span><br><span class="line"><span class="comment">  Asynchronous nature of OpenCL allows you to simultaneously perform tasks on</span></span><br><span class="line"><span class="comment">  the host CPU as well as the FPGA.</span></span><br><span class="line"><span class="comment">  Memory transfer operations are asynchronous when the blocking_read,</span></span><br><span class="line"><span class="comment">  blocking_write parameters are set to CL_FALSE. These operations are behaving</span></span><br><span class="line"><span class="comment">  on host memory so it is important to make sure that the command has completed</span></span><br><span class="line"><span class="comment">  before that memory is used.</span></span><br><span class="line"><span class="comment">  You can make sure an operation has completed by querying events returned by</span></span><br><span class="line"><span class="comment">  these commands. Events are OpenCL objects that track the status of operations.</span></span><br><span class="line"><span class="comment">  Event objects are created by kernel execution commands, read, write, map, copy</span></span><br><span class="line"><span class="comment">  commands on memory objects or user events created using clCreateUserEvent.</span></span><br><span class="line"><span class="comment">  Events can be used to synchronize operations between the host thread and the</span></span><br><span class="line"><span class="comment">  device or between two operations in the same context. You can also use events</span></span><br><span class="line"><span class="comment">  to time a particular operation if the command queue was created using the</span></span><br><span class="line"><span class="comment">  CL_QUEUE_PROFILING_ENABLE flag.</span></span><br><span class="line"><span class="comment">  Most enqueuing commands return events by accepting a cl_event pointer as their</span></span><br><span class="line"><span class="comment">  last argument of the call. These events can be queried using the</span></span><br><span class="line"><span class="comment">  clGetEventInfo function to get the status of a particular operation.</span></span><br><span class="line"><span class="comment">  Many functions also accept event lists that can be used to enforce ordering in</span></span><br><span class="line"><span class="comment">  an OpenCL context. These events lists are especially important in the context</span></span><br><span class="line"><span class="comment">  of out of order command queues as they are the only way specify dependency.</span></span><br><span class="line"><span class="comment">  Normal in-order command queues do not need this because dependency is enforced</span></span><br><span class="line"><span class="comment">  in the order the operation was enqueued. See the concurrent execution example</span></span><br><span class="line"><span class="comment">  for additional details on how create an use these types of command queues.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"CL/cl.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"xcl.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">array</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::chrono::duration;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::chrono::nanoseconds;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::chrono::seconds;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::default_random_engine;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::generate;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::uniform_int_distribution;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">vector</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Allocator template to align buffer to Page boundary for better data transfer</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">aligned_allocator</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">using</span> value_type = T;</span><br><span class="line">  <span class="function">T* <span class="title">allocate</span><span class="params">(<span class="built_in">std</span>::<span class="keyword">size_t</span> num)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">void</span>* ptr = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">if</span> (posix_memalign(&amp;ptr,<span class="number">4096</span>,num*<span class="keyword">sizeof</span>(T)))</span><br><span class="line">      <span class="keyword">throw</span> <span class="built_in">std</span>::bad_alloc();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">reinterpret_cast</span>&lt;T*&gt;(ptr);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">deallocate</span><span class="params">(T* p, <span class="built_in">std</span>::<span class="keyword">size_t</span> num)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ARRAY_SIZE = <span class="number">1</span> &lt;&lt; <span class="number">14</span>; <span class="comment">//  ARRAY_SIZE = 2^14</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">char</span> *error_message =</span><br><span class="line">    <span class="string">"Error: Result mismatch:\n"</span></span><br><span class="line">    <span class="string">"i = %d CPU result = %d Device result = %d\n"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Wrap any OpenCL API calls that return error code(cl_int) with the below macros</span></span><br><span class="line"><span class="comment">// to quickly check for an error</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OCL_CHECK(call)                                                        \</span></span><br><span class="line">  <span class="keyword">do</span> &#123;                                                                         \</span><br><span class="line">    cl_int err = call;                                                         \</span><br><span class="line">    <span class="keyword">if</span> (err != CL_SUCCESS) &#123;                                                   \</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"Error calling "</span> #call <span class="string">", error code is: %d\n"</span>, err);             \</span><br><span class="line">      <span class="built_in">exit</span>(EXIT_FAILURE);                                                      \</span><br><span class="line">    &#125;                                                                          \</span><br><span class="line">  &#125; <span class="keyword">while</span> (<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gen_random</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> default_random_engine e;</span><br><span class="line">  <span class="keyword">static</span> uniform_int_distribution&lt;<span class="keyword">int</span>&gt; dist(<span class="number">0</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> dist(e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// An event callback function that prints the operations performed by the OpenCL</span></span><br><span class="line"><span class="comment">// runtime.</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">event_cb</span><span class="params">(cl_event event, cl_int cmd_status, <span class="keyword">void</span> *data)</span> </span>&#123;</span><br><span class="line">  cl_command_type command;</span><br><span class="line">  clGetEventInfo(event, CL_EVENT_COMMAND_TYPE, <span class="keyword">sizeof</span>(cl_command_type),</span><br><span class="line">                 &amp;command, <span class="literal">nullptr</span>);</span><br><span class="line">  cl_int status;</span><br><span class="line">  clGetEventInfo(event, CL_EVENT_COMMAND_EXECUTION_STATUS, <span class="keyword">sizeof</span>(cl_int),</span><br><span class="line">                 &amp;status, <span class="literal">nullptr</span>);</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *command_str;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *status_str;</span><br><span class="line">  <span class="keyword">switch</span> (command) &#123;</span><br><span class="line">  <span class="keyword">case</span> CL_COMMAND_READ_BUFFER:</span><br><span class="line">    command_str = <span class="string">"buffer read"</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> CL_COMMAND_WRITE_BUFFER:</span><br><span class="line">    command_str = <span class="string">"buffer write"</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> CL_COMMAND_NDRANGE_KERNEL:</span><br><span class="line">    command_str = <span class="string">"kernel"</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> CL_COMMAND_MAP_BUFFER:</span><br><span class="line">    command_str = <span class="string">"kernel"</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> CL_COMMAND_COPY_BUFFER:</span><br><span class="line">    command_str = <span class="string">"kernel"</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> CL_COMMAND_MIGRATE_MEM_OBJECTS:</span><br><span class="line">        command_str = <span class="string">"buffer migrate"</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    command_str = <span class="string">"unknown"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">switch</span> (status) &#123;</span><br><span class="line">  <span class="keyword">case</span> CL_QUEUED:</span><br><span class="line">    status_str = <span class="string">"Queued"</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> CL_SUBMITTED:</span><br><span class="line">    status_str = <span class="string">"Submitted"</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> CL_RUNNING:</span><br><span class="line">    status_str = <span class="string">"Executing"</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> CL_COMPLETE:</span><br><span class="line">    status_str = <span class="string">"Completed"</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"[%s]: %s %s\n"</span>, <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">char</span> *&gt;(data), status_str,</span><br><span class="line">         command_str);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Sets the callback for a particular event</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_callback</span><span class="params">(cl_event event, <span class="keyword">const</span> <span class="keyword">char</span> *queue_name)</span> </span>&#123;</span><br><span class="line">  OCL_CHECK(</span><br><span class="line">      clSetEventCallback(event, CL_COMPLETE, event_cb, (<span class="keyword">void</span> *)queue_name));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">  cl_int err;</span><br><span class="line"></span><br><span class="line">  xcl_world world = xcl_world_single();</span><br><span class="line">  cl_program program = xcl_import_binary(world, <span class="string">"vector_addition"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// We will break down our problem into multiple iterations. Each iteration</span></span><br><span class="line">  <span class="comment">// will perform computation on a subset of the entire data-set.</span></span><br><span class="line">  <span class="keyword">size_t</span> elements_per_iteration = <span class="number">2048</span>;</span><br><span class="line">  <span class="keyword">size_t</span> bytes_per_iteration = elements_per_iteration * <span class="keyword">sizeof</span>(<span class="keyword">int</span>);</span><br><span class="line">  <span class="keyword">size_t</span> num_iterations = ARRAY_SIZE / elements_per_iteration; <span class="comment">//num_iterations = 8</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// This example will use an out of order command queue. The default command</span></span><br><span class="line">  <span class="comment">// queue created by xcl_world_single is an inorder command queue. Here we will</span></span><br><span class="line">  <span class="comment">// release the original queue and replace it with an out of order queue.</span></span><br><span class="line">  clReleaseCommandQueue(world.command_queue);</span><br><span class="line">  world.command_queue =</span><br><span class="line">      clCreateCommandQueue(world.context, world.device_id,</span><br><span class="line">                           CL_QUEUE_OUT_OF_ORDER_EXEC_MODE_ENABLE, &amp;err);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Allocate memory on the host and fill with random data.</span></span><br><span class="line">  <span class="comment">// 生成A,B随机初始值数据</span></span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>,aligned_allocator&lt;<span class="keyword">int</span>&gt;&gt; A(ARRAY_SIZE);</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>,aligned_allocator&lt;<span class="keyword">int</span>&gt;&gt; B(ARRAY_SIZE);</span><br><span class="line">  generate(begin(A), end(A), gen_random);</span><br><span class="line">  generate(begin(B), end(B), gen_random);</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>,aligned_allocator&lt;<span class="keyword">int</span>&gt;&gt; device_result(ARRAY_SIZE);</span><br><span class="line"></span><br><span class="line">  cl_kernel kernel = xcl_get_kernel(program, <span class="string">"vadd"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// This pair of events will be used to track when a kernel is finished with</span></span><br><span class="line">  <span class="comment">// the input buffers. Once the kernel is finished processing the data, a new</span></span><br><span class="line">  <span class="comment">// set of elements will be written into the buffer.</span></span><br><span class="line">  <span class="comment">// 合理建立同步事件</span></span><br><span class="line">  <span class="built_in">array</span>&lt;cl_event, 2&gt; kernel_events;</span><br><span class="line">  <span class="built_in">array</span>&lt;cl_event, 2&gt; read_events;</span><br><span class="line">  <span class="built_in">array</span>&lt;cl_event, 2&gt; map_events;</span><br><span class="line">  cl_mem buffer_a[<span class="number">2</span>], buffer_b[<span class="number">2</span>], buffer_c[<span class="number">2</span>]; <span class="comment">// Double Buffer 定义</span></span><br><span class="line">  <span class="keyword">size_t</span> global = <span class="number">1</span>, local = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">size_t</span> iteration_idx = <span class="number">0</span>; iteration_idx &lt; num_iterations; iteration_idx++) &#123;</span><br><span class="line">    <span class="keyword">int</span> flag = iteration_idx % <span class="number">2</span>; <span class="comment">// 建立Double Buffer的索引</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (iteration_idx &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">        clWaitForEvents(<span class="number">1</span>, &amp;map_events[flag]);</span><br><span class="line">        OCL_CHECK(clReleaseMemObject(buffer_a[flag]));</span><br><span class="line">        OCL_CHECK(clReleaseMemObject(buffer_b[flag]));</span><br><span class="line">        OCL_CHECK(clReleaseMemObject(buffer_c[flag]));</span><br><span class="line">        OCL_CHECK(clReleaseEvent(read_events[flag]));</span><br><span class="line">        OCL_CHECK(clReleaseEvent(kernel_events[flag]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 一次申请2048个int值大小的只读内存，从A拷贝到buffer_a，buffer_b中。</span></span><br><span class="line">    buffer_a[flag] = clCreateBuffer(world.context,</span><br><span class="line">            CL_MEM_READ_ONLY | CL_MEM_USE_HOST_PTR,</span><br><span class="line">           bytes_per_iteration, &amp;A[iteration_idx * elements_per_iteration], <span class="literal">NULL</span>);</span><br><span class="line">    buffer_b[flag] = clCreateBuffer(world.context,</span><br><span class="line">            CL_MEM_READ_ONLY | CL_MEM_USE_HOST_PTR,</span><br><span class="line">           bytes_per_iteration, &amp;B[iteration_idx * elements_per_iteration], <span class="literal">NULL</span>);</span><br><span class="line">    <span class="comment">//buffer_c申请2048个int值大小的只写内存，从device_result写入。</span></span><br><span class="line">    buffer_c[flag] = clCreateBuffer(world.context,</span><br><span class="line">            CL_MEM_WRITE_ONLY | CL_MEM_USE_HOST_PTR,</span><br><span class="line">           bytes_per_iteration, &amp;device_result[iteration_idx * elements_per_iteration], <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">array</span>&lt;cl_event, 2&gt; write_events;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Enqueueing Migrate Mem Object (Host to Device) calls\n"</span>);</span><br><span class="line">    <span class="comment">// These calls are asynchronous with respect to the main thread because we</span></span><br><span class="line">    <span class="comment">// are passing the CL_FALSE as the third parameter. Because we are passing</span></span><br><span class="line">    <span class="comment">// the events from the previous kernel call into the wait list, it will wait</span></span><br><span class="line">    <span class="comment">// for the previous operations to complete before continuing</span></span><br><span class="line">    <span class="comment">//clEnqueueMigrateMemObjects 替代 clEnqueueWriteBuffer</span></span><br><span class="line">    OCL_CHECK(clEnqueueMigrateMemObjects(</span><br><span class="line">        world.command_queue, <span class="number">1</span>, &amp;buffer_a[flag],</span><br><span class="line">        <span class="number">0</span> <span class="comment">/* flags, 0 means from host */</span>,</span><br><span class="line">        <span class="number">0</span>, <span class="literal">NULL</span>,</span><br><span class="line">        &amp;write_events[<span class="number">0</span>]));</span><br><span class="line">    set_callback(write_events[<span class="number">0</span>], <span class="string">"ooo_queue_write_events[0]"</span>);</span><br><span class="line">    <span class="comment">////clEnqueueMigrateMemObjects 替代 clEnqueueWriteBuffer</span></span><br><span class="line">    OCL_CHECK(clEnqueueMigrateMemObjects(</span><br><span class="line">        world.command_queue, <span class="number">1</span>, &amp;buffer_b[flag],</span><br><span class="line">        <span class="number">0</span> <span class="comment">/* flags, 0 means from host */</span>,</span><br><span class="line">        <span class="number">0</span>, <span class="literal">NULL</span>,</span><br><span class="line">        &amp;write_events[<span class="number">1</span>]));</span><br><span class="line">    set_callback(write_events[<span class="number">1</span>], <span class="string">"ooo_queue_write_events[1]"</span>);</span><br><span class="line"></span><br><span class="line">    xcl_set_kernel_arg(kernel, <span class="number">0</span>, <span class="keyword">sizeof</span>(cl_mem), &amp;buffer_c[iteration_idx % <span class="number">2</span>]);</span><br><span class="line">    xcl_set_kernel_arg(kernel, <span class="number">1</span>, <span class="keyword">sizeof</span>(cl_mem), &amp;buffer_a[iteration_idx % <span class="number">2</span>]);</span><br><span class="line">    xcl_set_kernel_arg(kernel, <span class="number">2</span>, <span class="keyword">sizeof</span>(cl_mem), &amp;buffer_b[iteration_idx % <span class="number">2</span>]);</span><br><span class="line">    xcl_set_kernel_arg(kernel, <span class="number">3</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>), &amp;elements_per_iteration);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Enqueueing NDRange kernel.\n"</span>);</span><br><span class="line">    <span class="comment">// This event needs to wait for the write buffer operations to complete</span></span><br><span class="line">    <span class="comment">// before executing. We are sending the write_events into its wait list to</span></span><br><span class="line">    <span class="comment">// ensure that the order of operations is correct.</span></span><br><span class="line">    OCL_CHECK(clEnqueueNDRangeKernel(world.command_queue, kernel, <span class="number">1</span>, <span class="literal">nullptr</span>,</span><br><span class="line">                                     &amp;global, &amp;local, <span class="number">2</span> , write_events.data(),</span><br><span class="line">                                     &amp;kernel_events[flag]));</span><br><span class="line">    set_callback(kernel_events[flag], <span class="string">"ooo_queue_kernel_events"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Enqueueing Migrate Mem Object (Device to Host) calls\n"</span>);</span><br><span class="line">    <span class="comment">// This operation only needs to wait for the kernel call. This call will</span></span><br><span class="line">    <span class="comment">// potentially overlap the next kernel call as well as the next read</span></span><br><span class="line">    <span class="comment">// operations</span></span><br><span class="line">    <span class="comment">// //clEnqueueMigrateMemObjects 替代 clEnqueueReadBuffer</span></span><br><span class="line">    OCL_CHECK(clEnqueueMigrateMemObjects(world.command_queue, <span class="number">1</span>, &amp;buffer_c[flag],</span><br><span class="line">                CL_MIGRATE_MEM_OBJECT_HOST, <span class="number">1</span>, &amp;kernel_events[flag], &amp;read_events[flag]));</span><br><span class="line"></span><br><span class="line">    set_callback(read_events[flag], <span class="string">"ooo_queue_read_events"</span>);</span><br><span class="line">    clEnqueueMapBuffer(world.command_queue, buffer_c[flag], CL_FALSE, CL_MAP_READ, <span class="number">0</span>,</span><br><span class="line">            bytes_per_iteration, <span class="number">1</span>, &amp;read_events[flag], &amp;map_events[flag], <span class="number">0</span>);</span><br><span class="line">    set_callback(map_events[flag], <span class="string">"ooo_queue_map_events"</span>);</span><br><span class="line"></span><br><span class="line">    OCL_CHECK(clReleaseEvent(write_events[<span class="number">0</span>]));</span><br><span class="line">    OCL_CHECK(clReleaseEvent(write_events[<span class="number">1</span>]));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Wait for all of the OpenCL operations to complete</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Waiting...\n"</span>);</span><br><span class="line">  clFlush(world.command_queue);</span><br><span class="line">  clFinish(world.command_queue);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//Releasing mem objects and events</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">2</span> ; i++)&#123;</span><br><span class="line">    OCL_CHECK(clWaitForEvents(<span class="number">1</span>, &amp;map_events[i]));</span><br><span class="line">    OCL_CHECK(clReleaseMemObject(buffer_a[i]));</span><br><span class="line">    OCL_CHECK(clReleaseMemObject(buffer_b[i]));</span><br><span class="line">    OCL_CHECK(clReleaseMemObject(buffer_c[i]));</span><br><span class="line">    OCL_CHECK(clReleaseEvent(read_events[i]));</span><br><span class="line">    OCL_CHECK(clReleaseEvent(kernel_events[i]));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> match = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// verify the results</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ARRAY_SIZE; i++) &#123;</span><br><span class="line">    <span class="keyword">int</span> host_result = A[i] + B[i];</span><br><span class="line">    <span class="keyword">if</span> (device_result[i] != host_result) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(error_message, i, host_result, device_result[i]);</span><br><span class="line">      match = <span class="number">1</span>;</span><br><span class="line">      <span class="comment">// break;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  OCL_CHECK(clReleaseKernel(kernel));</span><br><span class="line">  OCL_CHECK(clReleaseProgram(program));</span><br><span class="line">  xcl_release_world(world);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"TEST %s\n"</span>, (match ? <span class="string">"FAILED"</span> : <span class="string">"PASSED"</span>));</span><br><span class="line">  <span class="keyword">return</span> (match ? EXIT_FAILURE :  EXIT_SUCCESS);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="内核代码分析"><a href="#内核代码分析" class="headerlink" title="内核代码分析"></a>内核代码分析</h2><h3 id="内核源码"><a href="#内核源码" class="headerlink" title="内核源码"></a>内核源码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFFER_SIZE 256</span></span><br><span class="line">kernel __attribute__((reqd_work_group_size(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>)))</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vadd</span><span class="params">(global <span class="keyword">int</span>* c,</span></span></span><br><span class="line"><span class="function"><span class="params">          global <span class="keyword">const</span> <span class="keyword">int</span>* a,</span></span></span><br><span class="line"><span class="function"><span class="params">          global <span class="keyword">const</span> <span class="keyword">int</span>* b,</span></span></span><br><span class="line"><span class="function"><span class="params">          <span class="keyword">const</span> <span class="keyword">int</span> elements</span></span></span><br><span class="line"><span class="function"><span class="params">          )</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arrayA[BUFFER_SIZE];</span><br><span class="line">    <span class="keyword">int</span> arrayB[BUFFER_SIZE];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; elements ; i += BUFFER_SIZE)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> size = BUFFER_SIZE;</span><br><span class="line">        <span class="keyword">if</span> (i + size &gt; elements) size = elements - i;</span><br><span class="line">        readA: <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; size ; j++) arrayA[j] = a[i+j];</span><br><span class="line">        readB: <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; size ; j++) arrayB[j] = b[i+j];</span><br><span class="line">        vadd_writeC: <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; size ; j++) c[i+j] = arrayA[j] + arrayB[j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内核源码分析：</p><pre><code>向量相加内核模块，采用burst 突发传输的形式，突发长度为BUFFER_SIZE。需要学习的地方是，突发长度与数据导入过程需要进行比较，防止数据读入错误！内核一次运算elements个数据。</code></pre><h3 id="综合报表"><a href="#综合报表" class="headerlink" title="综合报表"></a>综合报表</h3><h3 id="Performence图"><a href="#Performence图" class="headerlink" title="Performence图"></a>Performence图</h3><h2 id="关键理解概念描述"><a href="#关键理解概念描述" class="headerlink" title="关键理解概念描述"></a>关键理解概念描述</h2><p><img src="http://oz3lw4cji.bkt.clouddn.com/8da1330ebf6c2b408993c342cec35553.png" alt=""></p><h2 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">INFO: Importing xclbin/vector_addition.hw.xilinx_adm-pcie-7v3_1ddr.xclbin</span><br><span class="line">INFO: Loaded file</span><br><span class="line">INFO: Created Binary</span><br><span class="line">INFO: Built Program</span><br><span class="line">Enqueueing Migrate Mem Object (Host to Device) calls</span><br><span class="line">Enqueueing NDRange kernel.</span><br><span class="line">Enqueueing Migrate Mem Object (Device to Host) calls</span><br><span class="line">Enqueueing Migrate Mem Object (Host to Device) calls</span><br><span class="line">[ooo_queue_write_events[0]]: Completed buffer migrate  ---&gt; Wa1</span><br><span class="line">[ooo_queue_write_events[1]]: Completed buffer migrate  ---&gt; Wb1</span><br><span class="line">[ooo_queue_write_events[0]]: Completed buffer migrate  ---&gt; Wa2</span><br><span class="line">[ooo_queue_write_events[1]]: Completed buffer migrate  ---&gt; Wb2</span><br><span class="line">[ooo_queue_kernel_events]: Completed kernel            ---&gt; CU1</span><br><span class="line">[ooo_queue_read_events]: Completed buffer migrate      ---&gt; Rc1(1)</span><br><span class="line">Enqueueing NDRange kernel.</span><br><span class="line">[ooo_queue_map_events]: Completed kernel               ---&gt; Rc1(2)</span><br><span class="line">Enqueueing Migrate Mem Object (Device to Host) calls</span><br><span class="line">Enqueueing Migrate Mem Object (Host to Device) calls</span><br><span class="line">[ooo_queue_kernel_events]: Completed kernel            ---&gt; CU2</span><br><span class="line">Enqueueing NDRange kernel.</span><br><span class="line">[ooo_queue_write_events[0]]: Completed buffer migrate  ---&gt; Wa3</span><br><span class="line">[ooo_queue_read_events]: Completed buffer migrate      ---&gt; Rc2(1)</span><br><span class="line">Enqueueing Migrate Mem Object (Device to Host) calls</span><br><span class="line">[ooo_queue_write_events[1]]: Completed buffer migrate  ---&gt; Wb3</span><br><span class="line">[ooo_queue_map_events]: Completed kernel               ---&gt; Rc2(2)</span><br><span class="line">[ooo_queue_kernel_events]: Completed kernel            ---&gt; CU3</span><br><span class="line">Enqueueing Migrate Mem Object (Host to Device) calls</span><br><span class="line">[ooo_queue_read_events]: Completed buffer migrate      ---&gt; Rc3(1)</span><br><span class="line">[ooo_queue_map_events]: Completed kernel               ---&gt; Rc3(2)</span><br><span class="line">[ooo_queue_write_events[0]]: Completed buffer migrate  ---&gt; Wa4</span><br><span class="line">Enqueueing NDRange kernel.</span><br><span class="line">[ooo_queue_write_events[1]]: Completed buffer migrate  ---&gt; Wb4</span><br><span class="line">Enqueueing Migrate Mem Object (Device to Host) calls</span><br><span class="line">Enqueueing Migrate Mem Object (Host to Device) calls</span><br><span class="line">[ooo_queue_kernel_events]: Completed kernel            ---&gt; CU4</span><br><span class="line">Enqueueing NDRange kernel.</span><br><span class="line">[ooo_queue_write_events[0]]: Completed buffer migrate  ---&gt; Wa5</span><br><span class="line">[ooo_queue_write_events[1]]: Completed buffer migrate  ---&gt; Wb5</span><br><span class="line">[ooo_queue_read_events]: Completed buffer migrate      ---&gt; Rc4(1)</span><br><span class="line">[ooo_queue_map_events]: Completed kernel               ---&gt; Rc4(2)</span><br><span class="line">Enqueueing Migrate Mem Object (Device to Host) calls</span><br><span class="line">[ooo_queue_kernel_events]: Completed kernel            ---&gt; CU5</span><br><span class="line">Enqueueing Migrate Mem Object (Host to Device) calls</span><br><span class="line">[ooo_queue_read_events]: Completed buffer migrate      ---&gt; Rc5(1)</span><br><span class="line">[ooo_queue_write_events[0]]: Completed buffer migrate</span><br><span class="line">[ooo_queue_map_events]: Completed kernel               ---&gt; Rc5(2)</span><br><span class="line">[ooo_queue_write_events[1]]: Completed buffer migrate</span><br><span class="line">Enqueueing NDRange kernel.</span><br><span class="line">Enqueueing Migrate Mem Object (Device to Host) calls</span><br><span class="line">[ooo_queue_kernel_events]: Completed kernel</span><br><span class="line">Enqueueing Migrate Mem Object (Host to Device) calls</span><br><span class="line">[ooo_queue_read_events]: Completed buffer migrate</span><br><span class="line">Enqueueing NDRange kernel.</span><br><span class="line">[ooo_queue_map_events]: Completed kernel</span><br><span class="line">[ooo_queue_write_events[0]]: Completed buffer migrate</span><br><span class="line">[ooo_queue_write_events[1]]: Completed buffer migrate</span><br><span class="line">Enqueueing Migrate Mem Object (Device to Host) calls</span><br><span class="line">Enqueueing Migrate Mem Object (Host to Device) calls</span><br><span class="line">[ooo_queue_kernel_events]: Completed kernel</span><br><span class="line">Enqueueing NDRange kernel.</span><br><span class="line">Enqueueing Migrate Mem Object (Device to Host) calls</span><br><span class="line">[ooo_queue_write_events[0]]: Completed buffer migrate</span><br><span class="line">[ooo_queue_read_events]: Completed buffer migrate</span><br><span class="line">[ooo_queue_write_events[1]]: Completed buffer migrate</span><br><span class="line">[ooo_queue_map_events]: Completed kernel</span><br><span class="line">Waiting...</span><br><span class="line">[ooo_queue_kernel_events]: Completed kernel</span><br><span class="line">[ooo_queue_read_events]: Completed buffer migrate</span><br><span class="line">[ooo_queue_map_events]: Completed kernel</span><br><span class="line">TEST PASSED</span><br></pre></td></tr></table></figure><p>实验结果分析：</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;例程描述&quot;&gt;&lt;a href=&quot;#例程描述&quot; class=&quot;headerlink&quot; title=&quot;例程描述&quot;&gt;&lt;/a&gt;例程描述&lt;/h2&gt;&lt;p&gt;这个示例将演示在一个应用中用户在主机端（CPU）与FPGA交叠的运算,从而达到将数据传输隐藏在计算过程中，提高数据传输效率。其中包括异步操作和事件对象。&lt;/p&gt;
&lt;h2 id=&quot;主要学习知识点&quot;&gt;&lt;a href=&quot;#主要学习知识点&quot; class=&quot;headerlink&quot; title=&quot;主要学习知识点&quot;&gt;&lt;/a&gt;主要学习知识点&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Key Concepts&lt;ul&gt;
&lt;li&gt;OpenCL API&lt;/li&gt;
&lt;li&gt;Host 和 FPGA 同步 Synchronize Host and FPGA&lt;/li&gt;
&lt;li&gt;处理过程异步 Asynchronous Processing&lt;/li&gt;
&lt;li&gt;事件 Events&lt;/li&gt;
&lt;li&gt;异步拷贝 Asynchronous memcpy&lt;/li&gt;
&lt;li&gt;Double Buffer 乒乓&lt;/li&gt;
&lt;li&gt;Burst Transfer 突发传输&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Keywords&lt;ul&gt;
&lt;li&gt;cl_event&lt;/li&gt;
&lt;li&gt;CL_QUEUE_OUT_OF_ORDER_EXEC_MODE_ENABLE&lt;/li&gt;
&lt;li&gt;clEnqueueMigrateMemObjects&lt;/li&gt;
&lt;li&gt;clEnqueueMapBuffer&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="SDAccel" scheme="http://xuke225.github.io.git/child/categories/SDAccel/"/>
    
      <category term="优化" scheme="http://xuke225.github.io.git/child/categories/SDAccel/%E4%BC%98%E5%8C%96/"/>
    
      <category term="host" scheme="http://xuke225.github.io.git/child/categories/SDAccel/%E4%BC%98%E5%8C%96/host/"/>
    
    
      <category term="SDAccel" scheme="http://xuke225.github.io.git/child/tags/SDAccel/"/>
    
      <category term="优化" scheme="http://xuke225.github.io.git/child/tags/%E4%BC%98%E5%8C%96/"/>
    
      <category term="host" scheme="http://xuke225.github.io.git/child/tags/host/"/>
    
  </entry>
  
  <entry>
    <title>MXNet model zoo 多网络推理</title>
    <link href="http://xuke225.github.io.git/child/2017/11/09/DeepLearning/mxnet/MXNET%20%E5%AE%9E%E7%8E%B0%E5%A4%9A%E7%BD%91%E7%BB%9C%E6%AD%A3%E5%90%91%E6%8E%A8%E7%90%86/"/>
    <id>http://xuke225.github.io.git/child/2017/11/09/DeepLearning/mxnet/MXNET 实现多网络正向推理/</id>
    <published>2017-11-08T16:00:00.000Z</published>
    <updated>2017-11-22T06:39:10.312Z</updated>
    
    <content type="html"><![CDATA[<h3 id="预备工作"><a href="#预备工作" class="headerlink" title="预备工作"></a>预备工作</h3><ul><li>从MXNET model zoo 中下载对应的模型参数及json配置文件 <a href="http://mxnet.incubator.apache.org/model_zoo/index.html" target="_blank" rel="noopener">链接</a></li><li>下载 synset.txt 便于程序读取分类结果</li></ul><h3 id="源码实现"><a href="#源码实现" class="headerlink" title="源码实现"></a>源码实现</h3><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mxnet <span class="keyword">as</span> mx</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2,sys,time</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loadModel</span><span class="params">(modelname)</span>:</span></span><br><span class="line">        t1 = time.time()</span><br><span class="line">        sym, arg_params, aux_params = mx.model.load_checkpoint(modelname, <span class="number">0</span>)</span><br><span class="line">        t2 = time.time()</span><br><span class="line">        t = <span class="number">1000</span>*(t2-t1)</span><br><span class="line">        print(<span class="string">"Loaded in %2.2f milliseconds"</span> % t)</span><br><span class="line"> <span class="comment">#       arg_params['prob_label'] = mx.nd.array([0])</span></span><br><span class="line"> <span class="comment">#       arg_params['softmax_label'] = mx.nd.array([0])</span></span><br><span class="line">        mod = mx.mod.Module(symbol=sym , context=mx.gpu() , label_names=<span class="keyword">None</span>)</span><br><span class="line">        mod.bind(for_training=<span class="keyword">False</span>, data_shapes=[(<span class="string">'data'</span>, (<span class="number">1</span>,<span class="number">3</span>,<span class="number">224</span>,<span class="number">224</span>))])</span><br><span class="line">        mod.set_params(arg_params,aux_params,allow_missing=<span class="keyword">True</span>)</span><br><span class="line">        <span class="keyword">return</span> mod</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loadCategories</span><span class="params">()</span>:</span></span><br><span class="line">        synsetfile = open(<span class="string">'../picture/synset.txt'</span>, <span class="string">'r'</span>)</span><br><span class="line">        synsets = []</span><br><span class="line">        <span class="keyword">for</span> l <span class="keyword">in</span> synsetfile:</span><br><span class="line">                synsets.append(l.rstrip())</span><br><span class="line">        <span class="keyword">return</span> synsets</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prepareNDArray</span><span class="params">(filename)</span>:</span></span><br><span class="line">        img = cv2.imread(filename)</span><br><span class="line">        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)</span><br><span class="line">        img = cv2.resize(img, (<span class="number">224</span>, <span class="number">224</span>,))</span><br><span class="line">        img = np.swapaxes(img, <span class="number">0</span>, <span class="number">2</span>)</span><br><span class="line">        img = np.swapaxes(img, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">        img = img[np.newaxis, :]</span><br><span class="line">        <span class="keyword">return</span> mx.nd.array(img)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(filename, model, categories, n)</span>:</span></span><br><span class="line">        array = prepareNDArray(filename)</span><br><span class="line">        Batch = namedtuple(<span class="string">'Batch'</span>, [<span class="string">'data'</span>])</span><br><span class="line">        t1 = time.time()</span><br><span class="line">        model.forward(Batch([array]))</span><br><span class="line">        t2 = time.time()</span><br><span class="line">        t = <span class="number">1000</span>*(t2-t1)</span><br><span class="line">        print(<span class="string">"Predicted in %2.2f millsecond"</span> % t)</span><br><span class="line">        prob = model.get_outputs()[<span class="number">0</span>].asnumpy()</span><br><span class="line">        prob = np.squeeze(prob)</span><br><span class="line">        sortedprobindex = np.argsort(prob)[::<span class="number">-1</span>]</span><br><span class="line">        topn = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> sortedprobindex[<span class="number">0</span>:n]:</span><br><span class="line">                topn.append((prob[i], categories[i]))</span><br><span class="line">        <span class="keyword">return</span> topn</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init</span><span class="params">(modelname)</span>:</span></span><br><span class="line">        model = loadModel(modelname)</span><br><span class="line">        cats = loadCategories()</span><br><span class="line">        <span class="keyword">return</span> model, cats</span><br></pre></td></tr></table></figure><h3 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">filename = sys.argv[<span class="number">1</span>]</span><br><span class="line">print(<span class="string">"*** Inception v3"</span>)</span><br><span class="line">inceptionv3,c = init(<span class="string">"../model/Inception-BN/Inception-BN"</span>)</span><br><span class="line">print(predict(<span class="string">'../picture/cat.jpg'</span>,inceptionv3,c,<span class="number">1</span>))</span><br><span class="line">print(<span class="string">"*** squeezenet_v1.0"</span>)</span><br><span class="line">squeeze_v1_0,c = init(<span class="string">"../model/squeezenet/squeezenet_v1.0"</span>)</span><br><span class="line">print(predict(<span class="string">'../picture/cat.jpg'</span>,squeeze_v1_0,c,<span class="number">1</span>))</span><br><span class="line">print(<span class="string">"*** squeezenet_v1.1"</span>)</span><br><span class="line">squeeze_v1_1,c = init(<span class="string">"../model/squeezenet/squeezenet_v1.1"</span>)</span><br><span class="line">print(predict(<span class="string">'../picture/cat.jpg'</span>,squeeze_v1_1,c,<span class="number">1</span>))</span><br><span class="line">print(<span class="string">"*** nin"</span>)</span><br><span class="line">nin,c = init(<span class="string">"../model/nin/nin"</span>)</span><br><span class="line">print(predict(<span class="string">'../picture/cat.jpg'</span>,nin,c,<span class="number">1</span>))</span><br></pre></td></tr></table></figure><pre><code>*** Inception v3Loaded in 20.42 millisecondsPredicted in 0.19 millsecond[(0.34680301, &apos;n02112018 Pomeranian&apos;)]*** squeezenet_v1.0Loaded in 2.94 millisecondsPredicted in 0.08 millsecond[(0.22845435, &apos;n02326432 hare&apos;)]*** squeezenet_v1.1Loaded in 2.93 millisecondsPredicted in 0.08 millsecond[(0.71776724, &apos;n02123045 tabby, tabby cat&apos;)]*** ninLoaded in 5.85 millisecondsPredicted in 0.14 millsecond[(0.67466462, &apos;n02119022 red fox, Vulpes vulpes&apos;)]</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;预备工作&quot;&gt;&lt;a href=&quot;#预备工作&quot; class=&quot;headerlink&quot; title=&quot;预备工作&quot;&gt;&lt;/a&gt;预备工作&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;从MXNET model zoo 中下载对应的模型参数及json配置文件 &lt;a href=&quot;http://mxnet.incubator.apache.org/model_zoo/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;链接&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;下载 synset.txt 便于程序读取分类结果&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;源码实现&quot;&gt;&lt;a href=&quot;#源码实现&quot; class=&quot;headerlink&quot; title=&quot;源码实现&quot;&gt;&lt;/a&gt;源码实现&lt;/h3&gt;
    
    </summary>
    
      <category term="mxnet" scheme="http://xuke225.github.io.git/child/categories/mxnet/"/>
    
    
      <category term="mxnet" scheme="http://xuke225.github.io.git/child/tags/mxnet/"/>
    
  </entry>
  
  <entry>
    <title>gmem_4bank</title>
    <link href="http://xuke225.github.io.git/child/2017/11/09/SDAccel/%E4%BC%98%E5%8C%96/kernel_to_gmem/gmem-4bank/"/>
    <id>http://xuke225.github.io.git/child/2017/11/09/SDAccel/优化/kernel_to_gmem/gmem-4bank/</id>
    <published>2017-11-08T16:00:00.000Z</published>
    <updated>2017-11-24T01:59:53.467Z</updated>
    
    <content type="html"><![CDATA[<h2 id="例程描述"><a href="#例程描述" class="headerlink" title="例程描述"></a>例程描述</h2><p>测试Kernel与Global Memory之间的带宽 multi bank（4块DDR独立数据传输）clEnqueueMapBuffer 与 clEnqueueUnmapMemobject 在 host 到 Global Memory 的数据优化</p><h2 id="主要学习知识点"><a href="#主要学习知识点" class="headerlink" title="主要学习知识点"></a>主要学习知识点</h2><ul><li>Key Concepts<ul><li>Concurrent execution （并发执行）</li><li>Out of Order Command Queues  （命令队列的执行顺序）</li><li>Multiple Command Queues （多个命令队列）</li></ul></li><li>Keywords<ul><li>cl_mem_ext_ptr_t</li><li>clEnqueueMapBuffer()</li><li>clEnqueueUnmapMemobject()</li></ul></li></ul><a id="more"></a><h2 id="主机端代码分析"><a href="#主机端代码分析" class="headerlink" title="主机端代码分析"></a>主机端代码分析</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;CL/opencl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;CL/cl_ext.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> USE_4DDR <span class="comment">//4块DDR独立数据传输方式</span></span></span><br><span class="line"><span class="comment">/////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">//load_file_to_memory</span></span><br><span class="line"><span class="comment">//Allocated memory for and load file from disk memory</span></span><br><span class="line"><span class="comment">//Return value</span></span><br><span class="line"><span class="comment">// 0   Success</span></span><br><span class="line"><span class="comment">//-1   Failure to open file</span></span><br><span class="line"><span class="comment">//-2   Failure to allocate memory</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">load_file_to_memory</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *filename, <span class="keyword">char</span> **result,<span class="keyword">size_t</span> *inputsize)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">unsigned</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">   FILE *f = fopen(filename, <span class="string">"rb"</span>);</span><br><span class="line">   <span class="keyword">if</span> (f == <span class="literal">NULL</span>) &#123;</span><br><span class="line">       *result = <span class="literal">NULL</span>;</span><br><span class="line">       <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">// -1 means file opening fail</span></span><br><span class="line">   &#125;</span><br><span class="line">   fseek(f, <span class="number">0</span>, SEEK_END);</span><br><span class="line">   size = ftell(f);</span><br><span class="line">   fseek(f, <span class="number">0</span>, SEEK_SET);</span><br><span class="line">   *result = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(size+<span class="number">1</span>);</span><br><span class="line">   <span class="keyword">if</span> (size != fread(*result, <span class="keyword">sizeof</span>(<span class="keyword">char</span>), size, f))</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="built_in">free</span>(*result);</span><br><span class="line">           <span class="keyword">return</span> <span class="number">-2</span>; <span class="comment">// -2 means file reading fail</span></span><br><span class="line">       &#125;</span><br><span class="line">   fclose(f);</span><br><span class="line">   (*result)[size] = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">if</span>(inputsize!=<span class="literal">NULL</span>) (*inputsize)=size;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">//opencl_setup</span></span><br><span class="line"><span class="comment">//Create context for Xilinx platform, Accelerator device</span></span><br><span class="line"><span class="comment">//Create single command queue for accelerator device</span></span><br><span class="line"><span class="comment">//Create program object with clCreateProgramWithBinary using given xclbin file name</span></span><br><span class="line"><span class="comment">//Return value</span></span><br><span class="line"><span class="comment">// 0    Success</span></span><br><span class="line"><span class="comment">//-1    Error</span></span><br><span class="line"><span class="comment">//-2    Failed to load XCLBIN file from disk</span></span><br><span class="line"><span class="comment">//-3    Failed to clCreateProgramWithBinary</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">opencl_setup</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *xclbinfilename, cl_platform_id *platform_id,</span></span></span><br><span class="line"><span class="function"><span class="params">                cl_device_id *devices, cl_device_id *device_id, cl_context  *context,</span></span></span><br><span class="line"><span class="function"><span class="params">                cl_command_queue *command_queue, cl_program *program,</span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="keyword">char</span> *cl_platform_name, <span class="keyword">const</span> <span class="keyword">char</span> *target_device_name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">char</span> cl_platform_vendor[<span class="number">1001</span>];</span><br><span class="line">   <span class="keyword">char</span> cl_device_name[<span class="number">1001</span>];</span><br><span class="line">   cl_int err;</span><br><span class="line">   cl_uint num_devices;</span><br><span class="line">   <span class="keyword">unsigned</span> <span class="keyword">int</span> device_found = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Get first platform</span></span><br><span class="line">   err = clGetPlatformIDs(<span class="number">1</span>,platform_id,<span class="literal">NULL</span>);</span><br><span class="line">   <span class="keyword">if</span> (err != CL_SUCCESS) &#123;</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"ERROR: Failed to find an OpenCL platform!\n"</span>);</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"ERROR: Test failed\n"</span>);</span><br><span class="line">       <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   err = clGetPlatformInfo(*platform_id,CL_PLATFORM_VENDOR,<span class="number">1000</span>,(<span class="keyword">void</span> *)cl_platform_vendor,<span class="literal">NULL</span>);</span><br><span class="line">   <span class="keyword">if</span> (err != CL_SUCCESS) &#123;</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"ERROR: clGetPlatformInfo(CL_PLATFORM_VENDOR) failed!\n"</span>);</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"ERROR: Test failed\n"</span>);</span><br><span class="line">       <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"CL_PLATFORM_VENDOR %s\n"</span>,cl_platform_vendor);</span><br><span class="line">   err = clGetPlatformInfo(*platform_id,CL_PLATFORM_NAME,<span class="number">1000</span>,(<span class="keyword">void</span> *)cl_platform_name,<span class="literal">NULL</span>);</span><br><span class="line">   <span class="keyword">if</span> (err != CL_SUCCESS) &#123;</span><br><span class="line">           <span class="built_in">printf</span>(<span class="string">"ERROR: clGetPlatformInfo(CL_PLATFORM_NAME) failed!\n"</span>);</span><br><span class="line">           <span class="built_in">printf</span>(<span class="string">"ERROR: Test failed\n"</span>);</span><br><span class="line">           <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"CL_PLATFORM_NAME %s\n"</span>,cl_platform_name);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Get Accelerator compute device</span></span><br><span class="line">   err = clGetDeviceIDs(*platform_id, CL_DEVICE_TYPE_ACCELERATOR, <span class="number">16</span>, devices, &amp;num_devices);</span><br><span class="line">   <span class="keyword">if</span> (err != CL_SUCCESS) &#123;</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"ERROR: Failed to create a device group!\n"</span>);</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"ERROR: Test failed\n"</span>);</span><br><span class="line">       <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//iterate all devices to select the target device.</span></span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">0</span>; i&lt;num_devices; i++) &#123;</span><br><span class="line">       err = clGetDeviceInfo(devices[i], CL_DEVICE_NAME, <span class="number">1024</span>, cl_device_name, <span class="number">0</span>);</span><br><span class="line">       <span class="keyword">if</span> (err != CL_SUCCESS) &#123;</span><br><span class="line">           <span class="built_in">printf</span>(<span class="string">"Error: Failed to get device name for device %d!\n"</span>, i);</span><br><span class="line">           <span class="built_in">printf</span>(<span class="string">"Test failed\n"</span>);</span><br><span class="line">           <span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//printf("CL_DEVICE_NAME %s\n", cl_device_name);</span></span><br><span class="line">       <span class="keyword">if</span>(<span class="built_in">strcmp</span>(cl_device_name, target_device_name) == <span class="number">0</span>) &#123;</span><br><span class="line">           *device_id = devices[i];</span><br><span class="line">           device_found = <span class="number">1</span>;</span><br><span class="line">           <span class="built_in">printf</span>(<span class="string">"Selected %s as the target device\n"</span>, cl_device_name);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (!device_found) &#123;</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"Target device %s not found. Exit.\n"</span>, target_device_name);</span><br><span class="line">       <span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Create a compute context containing accelerator device</span></span><br><span class="line">   (*context)= clCreateContext(<span class="number">0</span>, <span class="number">1</span>, device_id, <span class="literal">NULL</span>, <span class="literal">NULL</span>, &amp;err);</span><br><span class="line">   <span class="keyword">if</span> (!(*context))</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="built_in">printf</span>(<span class="string">"ERROR: Failed to create a compute context!\n"</span>);</span><br><span class="line">           <span class="built_in">printf</span>(<span class="string">"ERROR: Test failed\n"</span>);</span><br><span class="line">           <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Create a command queue for accelerator device</span></span><br><span class="line">   (*command_queue) = clCreateCommandQueue(*context, *device_id, CL_QUEUE_PROFILING_ENABLE, &amp;err);</span><br><span class="line">   <span class="keyword">if</span> (!(*command_queue))</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="built_in">printf</span>(<span class="string">"ERROR: Failed to create a command commands!\n"</span>);</span><br><span class="line">           <span class="built_in">printf</span>(<span class="string">"ERROR: code %i\n"</span>,err);</span><br><span class="line">           <span class="built_in">printf</span>(<span class="string">"ERROR: Test failed\n"</span>);</span><br><span class="line">           <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Load XCLBIN file binary from disk</span></span><br><span class="line">   <span class="keyword">int</span> status;</span><br><span class="line">   <span class="keyword">unsigned</span> <span class="keyword">char</span> *kernelbinary;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"loading %s\n"</span>, xclbinfilename);</span><br><span class="line">   <span class="keyword">size_t</span> xclbinlength;</span><br><span class="line">   err = load_file_to_memory(xclbinfilename, (<span class="keyword">char</span> **) &amp;kernelbinary,&amp;xclbinlength);</span><br><span class="line">   <span class="keyword">if</span> (err != <span class="number">0</span>) &#123;</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"ERROR: failed to load kernel from xclbin: %s\n"</span>, xclbinfilename);</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"ERROR: Test failed\n"</span>);</span><br><span class="line">       <span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Create the program from XCLBIN file, configuring accelerator device</span></span><br><span class="line">   (*program) = clCreateProgramWithBinary(*context, <span class="number">1</span>, device_id, &amp;xclbinlength, (<span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> **) &amp;kernelbinary, &amp;status, &amp;err);</span><br><span class="line">   <span class="keyword">if</span> ((!(*program)) || (err!=CL_SUCCESS)) &#123;</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"ERROR: Failed to create compute program from binary %d!\n"</span>, err);</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"ERROR: Test failed\n"</span>);</span><br><span class="line">       <span class="keyword">return</span> <span class="number">-3</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Build the program executable (no-op)</span></span><br><span class="line">   err = clBuildProgram(*program, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">   <span class="keyword">if</span> (err != CL_SUCCESS) &#123;</span><br><span class="line">           <span class="keyword">size_t</span> len;</span><br><span class="line">           <span class="keyword">char</span> buffer[<span class="number">2048</span>];</span><br><span class="line">           <span class="built_in">printf</span>(<span class="string">"ERROR: Failed to build program executable!\n"</span>);</span><br><span class="line">           clGetProgramBuildInfo(*program, *device_id, CL_PROGRAM_BUILD_LOG, <span class="keyword">sizeof</span>(buffer), buffer, &amp;len);</span><br><span class="line">           <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, buffer);</span><br><span class="line">           <span class="built_in">printf</span>(<span class="string">"ERROR: Test failed\n"</span>);</span><br><span class="line">           <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">//main</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(SDX_PLATFORM) &amp;&amp; !defined(TARGET_DEVICE)</span></span><br><span class="line"> <span class="meta">#<span class="meta-keyword">define</span> STR_VALUE(arg)      #arg</span></span><br><span class="line"> <span class="meta">#<span class="meta-keyword">define</span> GET_STRING(name) STR_VALUE(name)</span></span><br><span class="line"> <span class="meta">#<span class="meta-keyword">define</span> TARGET_DEVICE GET_STRING(SDX_PLATFORM)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">   <span class="comment">//TARGET_DEVICE macro needs to be passed from gcc command line</span></span><br><span class="line">   <span class="keyword">const</span> <span class="keyword">char</span> *target_device_name = TARGET_DEVICE;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">int</span> err, err1, err2, err3;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">size_t</span> globalbuffersize = <span class="number">1024</span>*<span class="number">1024</span>*<span class="number">1024</span>;    <span class="comment">//1GB</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//Reducing the data size for emulation mode</span></span><br><span class="line">   <span class="keyword">char</span> *xcl_mode = getenv(<span class="string">"XCL_EMULATION_MODE"</span>);</span><br><span class="line">   <span class="keyword">if</span> (xcl_mode != <span class="literal">NULL</span>)&#123;</span><br><span class="line">     globalbuffersize = <span class="number">1024</span> * <span class="number">1024</span> ;  <span class="comment">// 1MB</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//opencl setup</span></span><br><span class="line">   cl_platform_id platform_id;</span><br><span class="line">   cl_device_id device_id;</span><br><span class="line">   cl_device_id devices[<span class="number">16</span>];  <span class="comment">// compute device id</span></span><br><span class="line">   cl_context context;</span><br><span class="line">   cl_command_queue command_queue;</span><br><span class="line">   cl_program program;</span><br><span class="line">   <span class="keyword">char</span> cl_platform_name[<span class="number">1001</span>];</span><br><span class="line"></span><br><span class="line">   <span class="comment">//variables for profiling</span></span><br><span class="line">   <span class="keyword">uint64_t</span> nsduration;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (argc != <span class="number">2</span>)&#123;</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"Usage: %s &lt;xclbin_file&gt;\n"</span>, argv[<span class="number">0</span>]);</span><br><span class="line">       <span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   err = opencl_setup(argv[<span class="number">1</span>], &amp;platform_id, devices, &amp;device_id,</span><br><span class="line">                      &amp;context, &amp;command_queue, &amp;program, cl_platform_name,</span><br><span class="line">                      target_device_name);</span><br><span class="line">   <span class="keyword">if</span>(err==<span class="number">-1</span>)&#123;</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"Error : general failure setting up opencl context\n"</span>);</span><br><span class="line">       <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span>(err==<span class="number">-2</span>) &#123;</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"Error : failed to bandwidth.xclbin from disk\n"</span>);</span><br><span class="line">       <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span>(err==<span class="number">-3</span>) &#123;</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"Error : failed to clCreateProgramWithBinary with contents of xclbin\n"</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//access the ACCELERATOR kernel</span></span><br><span class="line">   cl_int clstatus;</span><br><span class="line">   cl_kernel kernel = clCreateKernel(program, <span class="string">"bandwidth"</span>, &amp;clstatus);</span><br><span class="line">   <span class="keyword">if</span> (!kernel || clstatus != CL_SUCCESS) &#123;</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"Error: Failed to create compute kernel!\n"</span>);</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"Error: Test failed\n"</span>);</span><br><span class="line">       <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//input buffer</span></span><br><span class="line">   <span class="keyword">unsigned</span> <span class="keyword">char</span> *input_host = ((<span class="keyword">unsigned</span> <span class="keyword">char</span> *)<span class="built_in">malloc</span>(globalbuffersize));</span><br><span class="line">   <span class="keyword">if</span>(input_host==<span class="literal">NULL</span>) &#123;</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"Error: Failed to allocate host side copy of OpenCL source buffer of size %zu\n"</span>,globalbuffersize);</span><br><span class="line">       <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">unsigned</span> <span class="keyword">int</span> i;</span><br><span class="line">   <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;globalbuffersize; i++)</span><br><span class="line">       input_host[i]=i%<span class="number">256</span>;</span><br><span class="line"></span><br><span class="line">   cl_mem input_buffer0, output_buffer0;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(USE_2DDR) || defined(USE_4DDR)</span></span><br><span class="line">   <span class="keyword">cl_mem_ext_ptr_t</span> input_buffer0_ext, output_buffer0_ext;</span><br><span class="line">   input_buffer0_ext.flags = XCL_MEM_DDR_BANK0; <span class="comment">//选择DDR0</span></span><br><span class="line">   input_buffer0_ext.obj = <span class="literal">NULL</span>;</span><br><span class="line">   input_buffer0_ext.param = <span class="number">0</span>;</span><br><span class="line">   input_buffer0 = clCreateBuffer(context,</span><br><span class="line">                                 CL_MEM_READ_WRITE | CL_MEM_EXT_PTR_XILINX,</span><br><span class="line">                                 globalbuffersize,</span><br><span class="line">                                 &amp;input_buffer0_ext,</span><br><span class="line">                                 &amp;err);</span><br><span class="line"></span><br><span class="line">   output_buffer0_ext.flags = XCL_MEM_DDR_BANK1;<span class="comment">//选择DDR1</span></span><br><span class="line">   output_buffer0_ext.obj = <span class="literal">NULL</span>;</span><br><span class="line">   output_buffer0_ext.param = <span class="number">0</span>;</span><br><span class="line">   output_buffer0 = clCreateBuffer(context,</span><br><span class="line">                                  CL_MEM_READ_WRITE | CL_MEM_EXT_PTR_XILINX,</span><br><span class="line">                                  globalbuffersize,</span><br><span class="line">                                  &amp;output_buffer0_ext,</span><br><span class="line">                                  &amp;err1);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(USE_4DDR)</span></span><br><span class="line">   cl_mem input_buffer1, output_buffer1;</span><br><span class="line">   <span class="keyword">cl_mem_ext_ptr_t</span> input_buffer1_ext, output_buffer1_ext;</span><br><span class="line">   input_buffer1_ext.flags = XCL_MEM_DDR_BANK2;<span class="comment">//选择DDR2</span></span><br><span class="line">   input_buffer1_ext.obj = <span class="literal">NULL</span>;</span><br><span class="line">   input_buffer1_ext.param = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">   input_buffer1 = clCreateBuffer(context,</span><br><span class="line">                                 CL_MEM_READ_WRITE | CL_MEM_EXT_PTR_XILINX,</span><br><span class="line">                                 globalbuffersize,</span><br><span class="line">                                 &amp;input_buffer1_ext,</span><br><span class="line">                                 &amp;err2);</span><br><span class="line"></span><br><span class="line">   output_buffer1_ext.flags = XCL_MEM_DDR_BANK3;<span class="comment">//选择DDR3</span></span><br><span class="line">   output_buffer1_ext.obj = <span class="literal">NULL</span>;</span><br><span class="line">   output_buffer1_ext.param = <span class="number">0</span>;</span><br><span class="line">   output_buffer1 = clCreateBuffer(context,</span><br><span class="line">                                  CL_MEM_READ_WRITE | CL_MEM_EXT_PTR_XILINX,</span><br><span class="line">                                  globalbuffersize,</span><br><span class="line">                                  &amp;output_buffer1_ext,</span><br><span class="line">                                  &amp;err3);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">   input_buffer0 = clCreateBuffer(context,</span><br><span class="line">                                 CL_MEM_READ_WRITE,</span><br><span class="line">                                 globalbuffersize,</span><br><span class="line">                                 <span class="literal">NULL</span>,</span><br><span class="line">                                 &amp;err);</span><br><span class="line"></span><br><span class="line">   output_buffer0 = clCreateBuffer(context,</span><br><span class="line">                                  CL_MEM_READ_WRITE,</span><br><span class="line">                                  globalbuffersize,</span><br><span class="line">                                  <span class="literal">NULL</span>,</span><br><span class="line">                                  &amp;err1);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span>(err != CL_SUCCESS) &#123;</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"Error: Failed to allocate input_buffer0 of size %zu\n"</span>, globalbuffersize);</span><br><span class="line">       <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (err1 != CL_SUCCESS) &#123;</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"Error: Failed to allocate output_buffer0 of size %zu\n"</span>, globalbuffersize);</span><br><span class="line">       <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> USE_4DDR</span></span><br><span class="line">   <span class="keyword">if</span>(err2 != CL_SUCCESS) &#123;</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"Error: Failed to allocate input_buffer1 of size %zu\n"</span>, globalbuffersize);</span><br><span class="line">       <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (err3 != CL_SUCCESS) &#123;</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"Error: Failed to allocate output_buffer1 of size %zu\n"</span>, globalbuffersize);</span><br><span class="line">       <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//</span></span><br><span class="line">   cl_ulong num_blocks = globalbuffersize/<span class="number">64</span>; <span class="comment">//1GB数据 一次处理uint16个数 16*4 = 64B个</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> USE_4DDR</span></span><br><span class="line">   <span class="keyword">double</span> dbytes = globalbuffersize*<span class="number">2.0</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">   <span class="keyword">double</span> dbytes = globalbuffersize;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">   <span class="keyword">double</span> dmbytes = dbytes / (((<span class="keyword">double</span>)<span class="number">1024</span>) * ((<span class="keyword">double</span>)<span class="number">1024</span>));</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"Starting kernel to read/write %.0lf MB bytes from/to global memory... \n"</span>, dmbytes);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//Write input buffer</span></span><br><span class="line">   <span class="comment">//Map input buffer for PCIe write （提高host --&gt; global memory 数据传输的速度）</span></span><br><span class="line">   <span class="keyword">unsigned</span> <span class="keyword">char</span> *map_input_buffer0;</span><br><span class="line">   <span class="comment">//将input_buffer0（global的地址映射到host端，便于在host端直接操作）</span></span><br><span class="line">   map_input_buffer0 = (<span class="keyword">unsigned</span> <span class="keyword">char</span> *) clEnqueueMapBuffer(command_queue,</span><br><span class="line">                                                           input_buffer0,</span><br><span class="line">                                                           CL_FALSE,</span><br><span class="line">                                                           CL_MAP_WRITE_INVALIDATE_REGION,</span><br><span class="line">                                                           <span class="number">0</span>,</span><br><span class="line">                                                           globalbuffersize,</span><br><span class="line">                                                           <span class="number">0</span>,</span><br><span class="line">                                                           <span class="literal">NULL</span>,</span><br><span class="line">                                                           <span class="literal">NULL</span>,</span><br><span class="line">                                                           &amp;err);</span><br><span class="line">   <span class="keyword">if</span> (err != CL_SUCCESS) &#123;</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"Error: Failed to clEnqueueMapBuffer OpenCL buffer\n"</span>);</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"Error: Test failed\n"</span>);</span><br><span class="line">       <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   clFinish(command_queue);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//prepare data to be written to the device</span></span><br><span class="line">   <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;globalbuffersize; i++)</span><br><span class="line">       map_input_buffer0[i] = input_host[i];</span><br><span class="line"></span><br><span class="line">   cl_event event1;</span><br><span class="line">   <span class="comment">//取消Map 映射</span></span><br><span class="line">   err = clEnqueueUnmapMemObject(command_queue,</span><br><span class="line">                                 input_buffer0,</span><br><span class="line">                                 map_input_buffer0,</span><br><span class="line">                                 <span class="number">0</span>,</span><br><span class="line">                                 <span class="literal">NULL</span>,</span><br><span class="line">                                 &amp;event1);</span><br><span class="line">   <span class="keyword">if</span> (err != CL_SUCCESS) &#123;</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"Error: Failed to copy input dataset to OpenCL buffer\n"</span>);</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"Error: Test failed\n"</span>);</span><br><span class="line">       <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> USE_4DDR</span></span><br><span class="line">   <span class="comment">//Map input buffer for PCIe write</span></span><br><span class="line">   <span class="keyword">unsigned</span> <span class="keyword">char</span> *map_input_buffer1;</span><br><span class="line">   map_input_buffer1 = (<span class="keyword">unsigned</span> <span class="keyword">char</span> *) clEnqueueMapBuffer(command_queue,</span><br><span class="line">                                                           input_buffer1,</span><br><span class="line">                                                           CL_FALSE,</span><br><span class="line">                                                           CL_MAP_WRITE_INVALIDATE_REGION,</span><br><span class="line">                                                           <span class="number">0</span>,</span><br><span class="line">                                                           globalbuffersize,</span><br><span class="line">                                                           <span class="number">0</span>,</span><br><span class="line">                                                           <span class="literal">NULL</span>,</span><br><span class="line">                                                           <span class="literal">NULL</span>,</span><br><span class="line">                                                           &amp;err);</span><br><span class="line">   <span class="keyword">if</span> (err != CL_SUCCESS) &#123;</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"Error: Failed to clEnqueueMapBuffer OpenCL buffer\n"</span>);</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"Error: Test failed\n"</span>);</span><br><span class="line">       <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   clFinish(command_queue);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//prepare data to be written to the device</span></span><br><span class="line">   <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;globalbuffersize; i++)</span><br><span class="line">       map_input_buffer1[i] = input_host[i];</span><br><span class="line"></span><br><span class="line">   cl_event event2;</span><br><span class="line">   err = clEnqueueUnmapMemObject(command_queue,</span><br><span class="line">                                 input_buffer1,</span><br><span class="line">                                 map_input_buffer1,</span><br><span class="line">                                 <span class="number">0</span>,</span><br><span class="line">                                 <span class="literal">NULL</span>,</span><br><span class="line">                                 &amp;event2);</span><br><span class="line">   <span class="keyword">if</span> (err != CL_SUCCESS) &#123;</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"Error: Failed to copy input dataset to OpenCL buffer\n"</span>);</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"Error: Test failed\n"</span>);</span><br><span class="line">       <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//execute kernel</span></span><br><span class="line">   <span class="keyword">int</span> arg_num = <span class="number">0</span>;</span><br><span class="line">   err  = <span class="number">0</span>;</span><br><span class="line">   err  = clSetKernelArg(kernel, arg_num++, <span class="keyword">sizeof</span>(cl_mem), &amp;input_buffer0);</span><br><span class="line">   err |= clSetKernelArg(kernel, arg_num++, <span class="keyword">sizeof</span>(cl_mem), &amp;output_buffer0);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> USE_4DDR</span></span><br><span class="line">   err |= clSetKernelArg(kernel, arg_num++, <span class="keyword">sizeof</span>(cl_mem), &amp;input_buffer1);</span><br><span class="line">   err |= clSetKernelArg(kernel, arg_num++, <span class="keyword">sizeof</span>(cl_mem), &amp;output_buffer1);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">   err |= clSetKernelArg(kernel, arg_num++,  <span class="keyword">sizeof</span>(cl_ulong), &amp;num_blocks);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (err != CL_SUCCESS) &#123;</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"ERROR: Failed to set kernel arguments! %d\n"</span>, err);</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"ERROR: Test failed\n"</span>);</span><br><span class="line">       <span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">size_t</span> global[<span class="number">1</span>];</span><br><span class="line">   <span class="keyword">size_t</span> local[<span class="number">1</span>];</span><br><span class="line">   global[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">   local[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">   cl_event ndrangeevent;</span><br><span class="line">   err = clEnqueueNDRangeKernel(command_queue, kernel, <span class="number">1</span>, <span class="literal">NULL</span>, global, local,</span><br><span class="line">                                <span class="number">0</span>, <span class="literal">NULL</span>, &amp;ndrangeevent);</span><br><span class="line">   <span class="keyword">if</span> (err != CL_SUCCESS) &#123;</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"ERROR: Failed to execute kernel %d\n"</span>, err);</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"ERROR: Test failed\n"</span>);</span><br><span class="line">       <span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   clFinish(command_queue);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//copy results back from OpenCL buffer</span></span><br><span class="line">   <span class="keyword">unsigned</span> <span class="keyword">char</span> *map_output_buffer0;</span><br><span class="line">   map_output_buffer0 = (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)clEnqueueMapBuffer(command_queue,</span><br><span class="line">                                                           output_buffer0,</span><br><span class="line">                                                           CL_FALSE,</span><br><span class="line">                                                           CL_MAP_READ,</span><br><span class="line">                                                           <span class="number">0</span>,</span><br><span class="line">                                                           globalbuffersize,</span><br><span class="line">                                                           <span class="number">0</span>,</span><br><span class="line">                                                           <span class="literal">NULL</span>,</span><br><span class="line">                                                           &amp;event1,</span><br><span class="line">                                                           &amp;err);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (err != CL_SUCCESS) &#123;</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"ERROR: Failed to read output size buffer %d\n"</span>, err);</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"ERROR: Test failed\n"</span>);</span><br><span class="line">       <span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">   &#125;</span><br><span class="line">   clFinish(command_queue);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//check</span></span><br><span class="line">   <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;globalbuffersize; i++) &#123;</span><br><span class="line">       <span class="keyword">if</span> (map_output_buffer0[i] != input_host[i]) &#123;</span><br><span class="line">           <span class="built_in">printf</span>(<span class="string">"ERROR : kernel failed to copy entry %i input0=%i output0=%i\n"</span>,</span><br><span class="line">                  i, input_host[i], map_output_buffer0[i]);</span><br><span class="line">           <span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> USE_4DDR</span></span><br><span class="line">   <span class="keyword">unsigned</span> <span class="keyword">char</span> *map_output_buffer1;</span><br><span class="line">   map_output_buffer1 = (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)clEnqueueMapBuffer(command_queue,</span><br><span class="line">                                                           output_buffer1,</span><br><span class="line">                                                           CL_FALSE,</span><br><span class="line">                                                           CL_MAP_READ,</span><br><span class="line">                                                           <span class="number">0</span>,</span><br><span class="line">                                                           globalbuffersize,</span><br><span class="line">                                                           <span class="number">0</span>,</span><br><span class="line">                                                           <span class="literal">NULL</span>,</span><br><span class="line">                                                           &amp;event1,</span><br><span class="line">                                                           &amp;err);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (err != CL_SUCCESS) &#123;</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"ERROR: Failed to read output size buffer %d\n"</span>, err);</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"ERROR: Test failed\n"</span>);</span><br><span class="line">       <span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">   &#125;</span><br><span class="line">   clFinish(command_queue);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//check</span></span><br><span class="line">   <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;globalbuffersize; i++) &#123;</span><br><span class="line">       <span class="keyword">if</span> (map_output_buffer1[i] != input_host[i]) &#123;</span><br><span class="line">           <span class="built_in">printf</span>(<span class="string">"ERROR : kernel failed to copy entry %i input1=%i output1=%i\n"</span>,</span><br><span class="line">                  i, input_host[i], map_output_buffer1[i]);</span><br><span class="line">           <span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">//--------------------------------------------------------------------------</span></span><br><span class="line">   <span class="comment">//profiling information</span></span><br><span class="line">   <span class="comment">//--------------------------------------------------------------------------</span></span><br><span class="line">   <span class="keyword">uint64_t</span> nstimestart, nstimeend;</span><br><span class="line">   clGetEventProfilingInfo(ndrangeevent, CL_PROFILING_COMMAND_START, <span class="keyword">sizeof</span>(<span class="keyword">uint64_t</span>), ((<span class="keyword">void</span> *)(&amp;nstimestart)), <span class="literal">NULL</span>);</span><br><span class="line">   clGetEventProfilingInfo(ndrangeevent, CL_PROFILING_COMMAND_END,    <span class="keyword">sizeof</span>(<span class="keyword">uint64_t</span>), ((<span class="keyword">void</span> *)(&amp;nstimeend)),    <span class="literal">NULL</span>);</span><br><span class="line">   nsduration = nstimeend-nstimestart;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">double</span> dnsduration = ((<span class="keyword">double</span>)nsduration);</span><br><span class="line">   <span class="keyword">double</span> dsduration = dnsduration / ((<span class="keyword">double</span>) <span class="number">1000000000</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="keyword">double</span> bpersec = (dbytes*<span class="number">2.0</span>/dsduration);</span><br><span class="line">   <span class="keyword">double</span> mbpersec = bpersec / ((<span class="keyword">double</span>) <span class="number">1024</span>*<span class="number">1024</span> );</span><br><span class="line"></span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"Kernel read %.0lf MB bytes from and wrote %.01f MB to global memory.\n"</span>, dmbytes, dmbytes);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"Execution time = %f (sec) \n"</span>, dsduration);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"Concurrent Read and Write Throughput = %f (MB/sec) \n"</span>, mbpersec);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//--------------------------------------------------------------------------</span></span><br><span class="line">   <span class="comment">//add clena up code</span></span><br><span class="line">   <span class="comment">//--------------------------------------------------------------------------</span></span><br><span class="line">   clReleaseMemObject(input_buffer0);</span><br><span class="line">   clReleaseMemObject(output_buffer0);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> USE_4DDR</span></span><br><span class="line">   clReleaseMemObject(input_buffer1);</span><br><span class="line">   clReleaseMemObject(output_buffer1);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">   clReleaseKernel(kernel);</span><br><span class="line">   clReleaseProgram(program);</span><br><span class="line">   clReleaseCommandQueue(command_queue);</span><br><span class="line">   clReleaseContext(context);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="内核代码分析"><a href="#内核代码分析" class="headerlink" title="内核代码分析"></a>内核代码分析</h2><h3 id="内核源码"><a href="#内核源码" class="headerlink" title="内核源码"></a>内核源码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> USE_4DDR</span></span><br><span class="line"></span><br><span class="line">__kernel</span><br><span class="line">__attribute__ ((reqd_work_group_size(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>)))</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bandwidth</span><span class="params">(__global uint16  * __restrict input0,</span></span></span><br><span class="line"><span class="function"><span class="params">               __global uint16  * __restrict output0,</span></span></span><br><span class="line"><span class="function"><span class="params">#ifdef USE_4DDR</span></span></span><br><span class="line"><span class="function"><span class="params">               __global uint16  * __restrict input1,</span></span></span><br><span class="line"><span class="function"><span class="params">               __global uint16  * __restrict output1,</span></span></span><br><span class="line"><span class="function"><span class="params">#endif</span></span></span><br><span class="line"><span class="function"><span class="params">               ulong num_blocks)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    ulong blockindex;</span><br><span class="line">    uint16 temp0, temp1;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    blockindex = <span class="number">0</span>;</span><br><span class="line">    __attribute__((xcl_pipeline_loop))</span><br><span class="line">    <span class="keyword">for</span> (blockindex=<span class="number">0</span>; blockindex&lt;num_blocks; blockindex++) &#123;</span><br><span class="line">        temp0 = input0[blockindex];</span><br><span class="line">        output0[blockindex] = temp0;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> USE_4DDR</span></span><br><span class="line">        temp1 = input1[blockindex];</span><br><span class="line">        output1[blockindex] = temp1;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>GUI Setting:<br><img src="http://oz3lw4cji.bkt.clouddn.com/5a9c71bb0e48d710533b11b2be3aa5b4.png" alt=""></li><li>Makefile Setting:<br><img src="http://oz3lw4cji.bkt.clouddn.com/95089ad51b2da43e1e43cdae2691f544.png" alt=""><br><img src="http://oz3lw4cji.bkt.clouddn.com/45051bcf3eaa6c329e1fa1d90d785ad0.png" alt=""></li></ul><h3 id="综合报表"><a href="#综合报表" class="headerlink" title="综合报表"></a>综合报表</h3><p><img src="http://oz3lw4cji.bkt.clouddn.com/fce920f90e5cbcd30b5f0c12a3c368c1.png" alt=""></p><h3 id="Performence图"><a href="#Performence图" class="headerlink" title="Performence图"></a>Performence图</h3><p><img src="http://oz3lw4cji.bkt.clouddn.com/93874202f0f536a07d15a0355583fd5e.png" alt=""><br><img src="http://oz3lw4cji.bkt.clouddn.com/640479e2f81d9756031aa0154479c5c6.png" alt=""><br><img src="http://oz3lw4cji.bkt.clouddn.com/47451ffff0ce3738a6b251b047b37bc3.png" alt=""></p><h2 id="关键理解概念描述"><a href="#关键理解概念描述" class="headerlink" title="关键理解概念描述"></a>关键理解概念描述</h2><p><img src="http://oz3lw4cji.bkt.clouddn.com/20e9cdb7babfa3c7e6c6b025f210fc99.png" alt=""></p><h2 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ ./test_memaccess.exe  binary_container_1.xclbin</span><br><span class="line">Linux:4.10.1-041001-generic:#201702260735 SMP Sun Feb 26 12:36:48 UTC 2017:x86_64</span><br><span class="line">---</span><br><span class="line">XILINX_OPENCL=&quot;/opt/xil-kcu1500/xbinst&quot;</span><br><span class="line">LD_LIBRARY_PATH=&quot;/opt/xil-kcu1500/xbinst/runtime/lib/x86_64:/opt/Xilinx/SDx/2017.2/runtime/lib/x86_64:/opt/Xilinx/SDx/2017.2/lib/lnx64.o&quot;</span><br><span class="line">---</span><br><span class="line">CL_PLATFORM_VENDOR Xilinx</span><br><span class="line">CL_PLATFORM_NAME Xilinx</span><br><span class="line">Selected xilinx_kcu1500_4ddr-xpr_4_0 as the target device</span><br><span class="line">loading binary_container_1.xclbin</span><br><span class="line">Starting kernel to read/write 2048 MB bytes from/to global memory...</span><br><span class="line">Kernel read 2048 MB bytes from and wrote 2048.0 MB to global memory.</span><br><span class="line">Execution time = 0.070036 (sec)</span><br><span class="line">Concurrent Read and Write Throughput = 58484.212297 (MB/sec)</span><br></pre></td></tr></table></figure><p>实验结果分析：<br>时钟频率为300Mhz<br>4块DDR独立进行使用，DDR0 –&gt; input0 (1GB) ; DDR1  &lt;– output0 (1GB)  ;  DDR2 –&gt; input1 (1GB) ; DDR3  &lt;– output1 (1GB)<br>共传输4GB的数据，用时0.070036s  总带宽：4096/0.070036 = 58484.212297 (MB/sec)<br>每个通道的带宽为 1024/0.070036  = 14621.052030 (MB/sec)<br>DDR3数据吞吐率为：300MHZ * 512bit / 8 = 19200 (MB/sec)<br>接口位宽利用率： 14621.052030 / 19200  = 76.1513%</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;例程描述&quot;&gt;&lt;a href=&quot;#例程描述&quot; class=&quot;headerlink&quot; title=&quot;例程描述&quot;&gt;&lt;/a&gt;例程描述&lt;/h2&gt;&lt;p&gt;测试Kernel与Global Memory之间的带宽 multi bank（4块DDR独立数据传输）clEnqueueMapBuffer 与 clEnqueueUnmapMemobject 在 host 到 Global Memory 的数据优化&lt;/p&gt;
&lt;h2 id=&quot;主要学习知识点&quot;&gt;&lt;a href=&quot;#主要学习知识点&quot; class=&quot;headerlink&quot; title=&quot;主要学习知识点&quot;&gt;&lt;/a&gt;主要学习知识点&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Key Concepts&lt;ul&gt;
&lt;li&gt;Concurrent execution （并发执行）&lt;/li&gt;
&lt;li&gt;Out of Order Command Queues  （命令队列的执行顺序）&lt;/li&gt;
&lt;li&gt;Multiple Command Queues （多个命令队列）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Keywords&lt;ul&gt;
&lt;li&gt;cl_mem_ext_ptr_t&lt;/li&gt;
&lt;li&gt;clEnqueueMapBuffer()&lt;/li&gt;
&lt;li&gt;clEnqueueUnmapMemobject()&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="SDAccel" scheme="http://xuke225.github.io.git/child/categories/SDAccel/"/>
    
      <category term="优化" scheme="http://xuke225.github.io.git/child/categories/SDAccel/%E4%BC%98%E5%8C%96/"/>
    
      <category term="kernel_to_gmem" scheme="http://xuke225.github.io.git/child/categories/SDAccel/%E4%BC%98%E5%8C%96/kernel-to-gmem/"/>
    
    
      <category term="SDAccel" scheme="http://xuke225.github.io.git/child/tags/SDAccel/"/>
    
      <category term="优化" scheme="http://xuke225.github.io.git/child/tags/%E4%BC%98%E5%8C%96/"/>
    
      <category term="kernel_to_gmem" scheme="http://xuke225.github.io.git/child/tags/kernel-to-gmem/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://xuke225.github.io.git/child/2017/11/07/hello-world/"/>
    <id>http://xuke225.github.io.git/child/2017/11/07/hello-world/</id>
    <published>2017-11-06T16:00:00.000Z</published>
    <updated>2017-11-24T02:38:43.220Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><p>$ index_z_group = (global_z - padd_offset)/VEC_SIZE $<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure></p><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><p><img src="http://oz3lw4cji.bkt.clouddn.com/%E5%8D%B7%E7%A7%AF%E8%BF%90%E8%A1%8C%E8%BF%87%E7%A8%8B%E7%A4%BA%E6%84%8F.gif" alt=""><br><a id="more"></a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --><!-- 其中 class="blockquote-center" 是必须的 --><blockquote class="blockquote-center">blah blah blah</blockquote><!-- 标签 方式，要求版本在0.4.5或以上 --><blockquote class="blockquote-center"><p>blah blah blah</p></blockquote><!-- 标签别名 --><blockquote class="blockquote-center"><p>blah blah blah </p></blockquote><h3 id="应用技巧"><a href="#应用技巧" class="headerlink" title="应用技巧"></a>应用技巧</h3><h4 id="插入公式"><a href="#插入公式" class="headerlink" title="插入公式"></a>插入公式</h4><p>行內公式 $\sin ^{ 2 }{ \theta +\cos ^{ 2 }{ \theta =1 }  }$ 行內公式<br>$f(x)=ax+b$</p><h4 id="插入视频"><a href="#插入视频" class="headerlink" title="插入视频"></a>插入视频</h4><ul><li><p>直接插入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe src=&quot;https://www.bilibili.com/blackboard/player.html?aid=16516956&amp;as_wide=1&quot; frameborder=&quot;0&quot; width=&quot;640&quot; height=&quot;430&quot; allowfullscreen&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure></li><li><p>插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-tag-bilibili</span><br><span class="line">使用方法</span><br><span class="line">&#123;% bilibili [av_id] %&#125;</span><br></pre></td></tr></table></figure></li></ul><div class="bili_video"><embed height="452" width="544" quality="high" allowfullscreen="true" type="application/x-shockwave-flash" src="http://share.acg.tv/flash.swf" flashvars="aid=NaN&page=1" pluginspage="http://www.adobe.com/shockwave/download/download.cgi?P1_Prod_Version=ShockwaveFlash"></div><p><span id="inline-red">红色</span><br>More info:<br> <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;p&gt;$ index_z_group = (global_z - padd_offset)/VEC_SIZE $&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://oz3lw4cji.bkt.clouddn.com/%E5%8D%B7%E7%A7%AF%E8%BF%90%E8%A1%8C%E8%BF%87%E7%A8%8B%E7%A4%BA%E6%84%8F.gif&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="test" scheme="http://xuke225.github.io.git/child/categories/test/"/>
    
    
      <category term="test" scheme="http://xuke225.github.io.git/child/tags/test/"/>
    
      <category term="hello web" scheme="http://xuke225.github.io.git/child/tags/hello-web/"/>
    
  </entry>
  
</feed>
